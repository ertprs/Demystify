//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DemystifyFema.Service.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DemsifyEntities : DbContext
    {
        public DemsifyEntities()
            : base("name=DemsifyEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual int AccessTokenCheck(string accessToken, ObjectParameter isValid)
        {
            var accessTokenParameter = accessToken != null ?
                new ObjectParameter("AccessToken", accessToken) :
                new ObjectParameter("AccessToken", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AccessTokenCheck", accessTokenParameter, isValid);
        }
    
        public virtual int LoginHistoryAdd(string loginFrom, Nullable<int> userId, string accessToken, ObjectParameter result)
        {
            var loginFromParameter = loginFrom != null ?
                new ObjectParameter("LoginFrom", loginFrom) :
                new ObjectParameter("LoginFrom", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var accessTokenParameter = accessToken != null ?
                new ObjectParameter("AccessToken", accessToken) :
                new ObjectParameter("AccessToken", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LoginHistoryAdd", loginFromParameter, userIdParameter, accessTokenParameter, result);
        }
    
        public virtual ObjectResult<LoginWithAdmin_Result> LoginWithAdmin(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LoginWithAdmin_Result>("LoginWithAdmin", userNameParameter, passwordParameter);
        }
    
        public virtual int Logout(string accessToken, ObjectParameter result)
        {
            var accessTokenParameter = accessToken != null ?
                new ObjectParameter("AccessToken", accessToken) :
                new ObjectParameter("AccessToken", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Logout", accessTokenParameter, result);
        }
    
        public virtual ObjectResult<UserGet_Result> UserGet(Nullable<int> userId, Nullable<bool> isActive)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserGet_Result>("UserGet", userIdParameter, isActiveParameter);
        }
    
        public virtual int ActNameAdd(string title, string actPDF, Nullable<int> createdBy, ObjectParameter result)
        {
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var actPDFParameter = actPDF != null ?
                new ObjectParameter("ActPDF", actPDF) :
                new ObjectParameter("ActPDF", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ActNameAdd", titleParameter, actPDFParameter, createdByParameter, result);
        }
    
        public virtual int ActNameDelete(Nullable<int> actID, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var actIDParameter = actID.HasValue ?
                new ObjectParameter("ActID", actID) :
                new ObjectParameter("ActID", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ActNameDelete", actIDParameter, modifiedByParameter, result);
        }
    
        public virtual int ActNameUpdate(Nullable<int> actID, string title, string actPDF, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var actIDParameter = actID.HasValue ?
                new ObjectParameter("ActID", actID) :
                new ObjectParameter("ActID", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var actPDFParameter = actPDF != null ?
                new ObjectParameter("ActPDF", actPDF) :
                new ObjectParameter("ActPDF", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ActNameUpdate", actIDParameter, titleParameter, actPDFParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<ActNameGet_Result> ActNameGet(Nullable<int> actID, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var actIDParameter = actID.HasValue ?
                new ObjectParameter("ActID", actID) :
                new ObjectParameter("ActID", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ActNameGet_Result>("ActNameGet", actIDParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int AllDefinitionAdd(Nullable<int> actId, string definitionName, string fullDInsertion, string authorNote, Nullable<int> createdBy, ObjectParameter result)
        {
            var actIdParameter = actId.HasValue ?
                new ObjectParameter("ActId", actId) :
                new ObjectParameter("ActId", typeof(int));
    
            var definitionNameParameter = definitionName != null ?
                new ObjectParameter("DefinitionName", definitionName) :
                new ObjectParameter("DefinitionName", typeof(string));
    
            var fullDInsertionParameter = fullDInsertion != null ?
                new ObjectParameter("FullDInsertion", fullDInsertion) :
                new ObjectParameter("FullDInsertion", typeof(string));
    
            var authorNoteParameter = authorNote != null ?
                new ObjectParameter("AuthorNote", authorNote) :
                new ObjectParameter("AuthorNote", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AllDefinitionAdd", actIdParameter, definitionNameParameter, fullDInsertionParameter, authorNoteParameter, createdByParameter, result);
        }
    
        public virtual int AllDefinitionDelete(Nullable<int> id, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AllDefinitionDelete", idParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<AllDefinitionGet_Result> AllDefinitionGet(Nullable<int> id, Nullable<int> actId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var actIdParameter = actId.HasValue ?
                new ObjectParameter("ActId", actId) :
                new ObjectParameter("ActId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AllDefinitionGet_Result>("AllDefinitionGet", idParameter, actIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int AllDefinitionUpdate(Nullable<int> id, Nullable<int> actId, string definitionName, string fullDInsertion, string authorNote, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var actIdParameter = actId.HasValue ?
                new ObjectParameter("ActId", actId) :
                new ObjectParameter("ActId", typeof(int));
    
            var definitionNameParameter = definitionName != null ?
                new ObjectParameter("DefinitionName", definitionName) :
                new ObjectParameter("DefinitionName", typeof(string));
    
            var fullDInsertionParameter = fullDInsertion != null ?
                new ObjectParameter("FullDInsertion", fullDInsertion) :
                new ObjectParameter("FullDInsertion", typeof(string));
    
            var authorNoteParameter = authorNote != null ?
                new ObjectParameter("AuthorNote", authorNote) :
                new ObjectParameter("AuthorNote", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AllDefinitionUpdate", idParameter, actIdParameter, definitionNameParameter, fullDInsertionParameter, authorNoteParameter, modifiedByParameter, result);
        }
    
        public virtual int RegulationAdd(string regulationName, string regulationNumber, string year, Nullable<System.DateTime> publicationDate, Nullable<int> createdBy, ObjectParameter result)
        {
            var regulationNameParameter = regulationName != null ?
                new ObjectParameter("RegulationName", regulationName) :
                new ObjectParameter("RegulationName", typeof(string));
    
            var regulationNumberParameter = regulationNumber != null ?
                new ObjectParameter("RegulationNumber", regulationNumber) :
                new ObjectParameter("RegulationNumber", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var publicationDateParameter = publicationDate.HasValue ?
                new ObjectParameter("PublicationDate", publicationDate) :
                new ObjectParameter("PublicationDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RegulationAdd", regulationNameParameter, regulationNumberParameter, yearParameter, publicationDateParameter, createdByParameter, result);
        }
    
        public virtual int RegulationDelete(Nullable<int> regulationId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var regulationIdParameter = regulationId.HasValue ?
                new ObjectParameter("RegulationId", regulationId) :
                new ObjectParameter("RegulationId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RegulationDelete", regulationIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<RegulationGet_Result> RegulationGet(Nullable<int> regulationId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var regulationIdParameter = regulationId.HasValue ?
                new ObjectParameter("RegulationId", regulationId) :
                new ObjectParameter("RegulationId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RegulationGet_Result>("RegulationGet", regulationIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int RegulationUpdate(Nullable<int> regulationId, string regulationName, string regulationNumber, string year, Nullable<System.DateTime> publicationDate, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var regulationIdParameter = regulationId.HasValue ?
                new ObjectParameter("RegulationId", regulationId) :
                new ObjectParameter("RegulationId", typeof(int));
    
            var regulationNameParameter = regulationName != null ?
                new ObjectParameter("RegulationName", regulationName) :
                new ObjectParameter("RegulationName", typeof(string));
    
            var regulationNumberParameter = regulationNumber != null ?
                new ObjectParameter("RegulationNumber", regulationNumber) :
                new ObjectParameter("RegulationNumber", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var publicationDateParameter = publicationDate.HasValue ?
                new ObjectParameter("PublicationDate", publicationDate) :
                new ObjectParameter("PublicationDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RegulationUpdate", regulationIdParameter, regulationNameParameter, regulationNumberParameter, yearParameter, publicationDateParameter, modifiedByParameter, result);
        }
    
        public virtual int FemaindexAdd(Nullable<int> regulationid, string indexNo, string indexname, string indexContent, Nullable<int> saveAfterIndexId, Nullable<int> createdBy, ObjectParameter result)
        {
            var regulationidParameter = regulationid.HasValue ?
                new ObjectParameter("Regulationid", regulationid) :
                new ObjectParameter("Regulationid", typeof(int));
    
            var indexNoParameter = indexNo != null ?
                new ObjectParameter("IndexNo", indexNo) :
                new ObjectParameter("IndexNo", typeof(string));
    
            var indexnameParameter = indexname != null ?
                new ObjectParameter("Indexname", indexname) :
                new ObjectParameter("Indexname", typeof(string));
    
            var indexContentParameter = indexContent != null ?
                new ObjectParameter("IndexContent", indexContent) :
                new ObjectParameter("IndexContent", typeof(string));
    
            var saveAfterIndexIdParameter = saveAfterIndexId.HasValue ?
                new ObjectParameter("SaveAfterIndexId", saveAfterIndexId) :
                new ObjectParameter("SaveAfterIndexId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FemaindexAdd", regulationidParameter, indexNoParameter, indexnameParameter, indexContentParameter, saveAfterIndexIdParameter, createdByParameter, result);
        }
    
        public virtual int FemaindexDelete(Nullable<int> indexid, Nullable<int> regulationId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var indexidParameter = indexid.HasValue ?
                new ObjectParameter("Indexid", indexid) :
                new ObjectParameter("Indexid", typeof(int));
    
            var regulationIdParameter = regulationId.HasValue ?
                new ObjectParameter("RegulationId", regulationId) :
                new ObjectParameter("RegulationId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FemaindexDelete", indexidParameter, regulationIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<FemaindexGet_Result> FemaindexGet(Nullable<int> indexid, Nullable<int> regulationid, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var indexidParameter = indexid.HasValue ?
                new ObjectParameter("Indexid", indexid) :
                new ObjectParameter("Indexid", typeof(int));
    
            var regulationidParameter = regulationid.HasValue ?
                new ObjectParameter("Regulationid", regulationid) :
                new ObjectParameter("Regulationid", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FemaindexGet_Result>("FemaindexGet", indexidParameter, regulationidParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int FemaindexUpdate(Nullable<int> indexid, Nullable<int> regulationid, string indexNo, string indexname, string indexContent, Nullable<int> saveAfterIndexId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var indexidParameter = indexid.HasValue ?
                new ObjectParameter("Indexid", indexid) :
                new ObjectParameter("Indexid", typeof(int));
    
            var regulationidParameter = regulationid.HasValue ?
                new ObjectParameter("Regulationid", regulationid) :
                new ObjectParameter("Regulationid", typeof(int));
    
            var indexNoParameter = indexNo != null ?
                new ObjectParameter("IndexNo", indexNo) :
                new ObjectParameter("IndexNo", typeof(string));
    
            var indexnameParameter = indexname != null ?
                new ObjectParameter("Indexname", indexname) :
                new ObjectParameter("Indexname", typeof(string));
    
            var indexContentParameter = indexContent != null ?
                new ObjectParameter("IndexContent", indexContent) :
                new ObjectParameter("IndexContent", typeof(string));
    
            var saveAfterIndexIdParameter = saveAfterIndexId.HasValue ?
                new ObjectParameter("SaveAfterIndexId", saveAfterIndexId) :
                new ObjectParameter("SaveAfterIndexId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FemaindexUpdate", indexidParameter, regulationidParameter, indexNoParameter, indexnameParameter, indexContentParameter, saveAfterIndexIdParameter, modifiedByParameter, result);
        }
    
        public virtual int FemaSubIndexAdd(Nullable<int> indexId, string subIndexNumber, string subIndexName, string subIndexContent, Nullable<int> saveAfterSubIndexId, Nullable<int> createdBy, ObjectParameter result)
        {
            var indexIdParameter = indexId.HasValue ?
                new ObjectParameter("IndexId", indexId) :
                new ObjectParameter("IndexId", typeof(int));
    
            var subIndexNumberParameter = subIndexNumber != null ?
                new ObjectParameter("SubIndexNumber", subIndexNumber) :
                new ObjectParameter("SubIndexNumber", typeof(string));
    
            var subIndexNameParameter = subIndexName != null ?
                new ObjectParameter("SubIndexName", subIndexName) :
                new ObjectParameter("SubIndexName", typeof(string));
    
            var subIndexContentParameter = subIndexContent != null ?
                new ObjectParameter("SubIndexContent", subIndexContent) :
                new ObjectParameter("SubIndexContent", typeof(string));
    
            var saveAfterSubIndexIdParameter = saveAfterSubIndexId.HasValue ?
                new ObjectParameter("SaveAfterSubIndexId", saveAfterSubIndexId) :
                new ObjectParameter("SaveAfterSubIndexId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FemaSubIndexAdd", indexIdParameter, subIndexNumberParameter, subIndexNameParameter, subIndexContentParameter, saveAfterSubIndexIdParameter, createdByParameter, result);
        }
    
        public virtual int FemaSubIndexDelete(Nullable<int> femaSubIndexId, Nullable<int> femaIndexId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var femaSubIndexIdParameter = femaSubIndexId.HasValue ?
                new ObjectParameter("FemaSubIndexId", femaSubIndexId) :
                new ObjectParameter("FemaSubIndexId", typeof(int));
    
            var femaIndexIdParameter = femaIndexId.HasValue ?
                new ObjectParameter("FemaIndexId", femaIndexId) :
                new ObjectParameter("FemaIndexId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FemaSubIndexDelete", femaSubIndexIdParameter, femaIndexIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<FemaSubIndexGet_Result> FemaSubIndexGet(Nullable<int> femaSubIndexId, Nullable<int> indexId, Nullable<int> regulationId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var femaSubIndexIdParameter = femaSubIndexId.HasValue ?
                new ObjectParameter("FemaSubIndexId", femaSubIndexId) :
                new ObjectParameter("FemaSubIndexId", typeof(int));
    
            var indexIdParameter = indexId.HasValue ?
                new ObjectParameter("IndexId", indexId) :
                new ObjectParameter("IndexId", typeof(int));
    
            var regulationIdParameter = regulationId.HasValue ?
                new ObjectParameter("RegulationId", regulationId) :
                new ObjectParameter("RegulationId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FemaSubIndexGet_Result>("FemaSubIndexGet", femaSubIndexIdParameter, indexIdParameter, regulationIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int FemaSubIndexUpdate(Nullable<int> femaSubIndexId, Nullable<int> indexId, string subIndexNumber, string subIndexName, string subIndexContent, Nullable<int> saveAfterSubIndexId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var femaSubIndexIdParameter = femaSubIndexId.HasValue ?
                new ObjectParameter("FemaSubIndexId", femaSubIndexId) :
                new ObjectParameter("FemaSubIndexId", typeof(int));
    
            var indexIdParameter = indexId.HasValue ?
                new ObjectParameter("IndexId", indexId) :
                new ObjectParameter("IndexId", typeof(int));
    
            var subIndexNumberParameter = subIndexNumber != null ?
                new ObjectParameter("SubIndexNumber", subIndexNumber) :
                new ObjectParameter("SubIndexNumber", typeof(string));
    
            var subIndexNameParameter = subIndexName != null ?
                new ObjectParameter("SubIndexName", subIndexName) :
                new ObjectParameter("SubIndexName", typeof(string));
    
            var subIndexContentParameter = subIndexContent != null ?
                new ObjectParameter("SubIndexContent", subIndexContent) :
                new ObjectParameter("SubIndexContent", typeof(string));
    
            var saveAfterSubIndexIdParameter = saveAfterSubIndexId.HasValue ?
                new ObjectParameter("SaveAfterSubIndexId", saveAfterSubIndexId) :
                new ObjectParameter("SaveAfterSubIndexId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FemaSubIndexUpdate", femaSubIndexIdParameter, indexIdParameter, subIndexNumberParameter, subIndexNameParameter, subIndexContentParameter, saveAfterSubIndexIdParameter, modifiedByParameter, result);
        }
    
        public virtual int NotificationAdd(Nullable<int> regulationid, Nullable<int> masterDirectionId, string notificationNo, string notificationName, Nullable<System.DateTime> notificationDate, Nullable<System.DateTime> notificationEffectiveDate, Nullable<int> notificationTypeId, string gSRNo, Nullable<System.DateTime> gSRDate, string notificationPDF, string gSRPDF, string sectorIds, string subSectorIds, Nullable<int> createdBy, ObjectParameter result)
        {
            var regulationidParameter = regulationid.HasValue ?
                new ObjectParameter("Regulationid", regulationid) :
                new ObjectParameter("Regulationid", typeof(int));
    
            var masterDirectionIdParameter = masterDirectionId.HasValue ?
                new ObjectParameter("MasterDirectionId", masterDirectionId) :
                new ObjectParameter("MasterDirectionId", typeof(int));
    
            var notificationNoParameter = notificationNo != null ?
                new ObjectParameter("NotificationNo", notificationNo) :
                new ObjectParameter("NotificationNo", typeof(string));
    
            var notificationNameParameter = notificationName != null ?
                new ObjectParameter("NotificationName", notificationName) :
                new ObjectParameter("NotificationName", typeof(string));
    
            var notificationDateParameter = notificationDate.HasValue ?
                new ObjectParameter("NotificationDate", notificationDate) :
                new ObjectParameter("NotificationDate", typeof(System.DateTime));
    
            var notificationEffectiveDateParameter = notificationEffectiveDate.HasValue ?
                new ObjectParameter("NotificationEffectiveDate", notificationEffectiveDate) :
                new ObjectParameter("NotificationEffectiveDate", typeof(System.DateTime));
    
            var notificationTypeIdParameter = notificationTypeId.HasValue ?
                new ObjectParameter("NotificationTypeId", notificationTypeId) :
                new ObjectParameter("NotificationTypeId", typeof(int));
    
            var gSRNoParameter = gSRNo != null ?
                new ObjectParameter("GSRNo", gSRNo) :
                new ObjectParameter("GSRNo", typeof(string));
    
            var gSRDateParameter = gSRDate.HasValue ?
                new ObjectParameter("GSRDate", gSRDate) :
                new ObjectParameter("GSRDate", typeof(System.DateTime));
    
            var notificationPDFParameter = notificationPDF != null ?
                new ObjectParameter("NotificationPDF", notificationPDF) :
                new ObjectParameter("NotificationPDF", typeof(string));
    
            var gSRPDFParameter = gSRPDF != null ?
                new ObjectParameter("GSRPDF", gSRPDF) :
                new ObjectParameter("GSRPDF", typeof(string));
    
            var sectorIdsParameter = sectorIds != null ?
                new ObjectParameter("SectorIds", sectorIds) :
                new ObjectParameter("SectorIds", typeof(string));
    
            var subSectorIdsParameter = subSectorIds != null ?
                new ObjectParameter("SubSectorIds", subSectorIds) :
                new ObjectParameter("SubSectorIds", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NotificationAdd", regulationidParameter, masterDirectionIdParameter, notificationNoParameter, notificationNameParameter, notificationDateParameter, notificationEffectiveDateParameter, notificationTypeIdParameter, gSRNoParameter, gSRDateParameter, notificationPDFParameter, gSRPDFParameter, sectorIdsParameter, subSectorIdsParameter, createdByParameter, result);
        }
    
        public virtual int NotificationDelete(Nullable<int> notificationId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var notificationIdParameter = notificationId.HasValue ?
                new ObjectParameter("NotificationId", notificationId) :
                new ObjectParameter("NotificationId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NotificationDelete", notificationIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<NotificationGet_Result> NotificationGet(Nullable<int> notificationId, Nullable<int> regulationId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var notificationIdParameter = notificationId.HasValue ?
                new ObjectParameter("NotificationId", notificationId) :
                new ObjectParameter("NotificationId", typeof(int));
    
            var regulationIdParameter = regulationId.HasValue ?
                new ObjectParameter("RegulationId", regulationId) :
                new ObjectParameter("RegulationId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NotificationGet_Result>("NotificationGet", notificationIdParameter, regulationIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int NotificationUpdate(Nullable<int> notificationId, Nullable<int> regulationid, Nullable<int> masterDirectionId, string notificationNo, string notificationName, Nullable<System.DateTime> notificationDate, Nullable<System.DateTime> notificationEffectiveDate, Nullable<int> notificationTypeId, string gSRNo, Nullable<System.DateTime> gSRDate, string notificationPDF, string gSRPDF, string sectorIds, string subSectorIds, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var notificationIdParameter = notificationId.HasValue ?
                new ObjectParameter("NotificationId", notificationId) :
                new ObjectParameter("NotificationId", typeof(int));
    
            var regulationidParameter = regulationid.HasValue ?
                new ObjectParameter("Regulationid", regulationid) :
                new ObjectParameter("Regulationid", typeof(int));
    
            var masterDirectionIdParameter = masterDirectionId.HasValue ?
                new ObjectParameter("MasterDirectionId", masterDirectionId) :
                new ObjectParameter("MasterDirectionId", typeof(int));
    
            var notificationNoParameter = notificationNo != null ?
                new ObjectParameter("NotificationNo", notificationNo) :
                new ObjectParameter("NotificationNo", typeof(string));
    
            var notificationNameParameter = notificationName != null ?
                new ObjectParameter("NotificationName", notificationName) :
                new ObjectParameter("NotificationName", typeof(string));
    
            var notificationDateParameter = notificationDate.HasValue ?
                new ObjectParameter("NotificationDate", notificationDate) :
                new ObjectParameter("NotificationDate", typeof(System.DateTime));
    
            var notificationEffectiveDateParameter = notificationEffectiveDate.HasValue ?
                new ObjectParameter("NotificationEffectiveDate", notificationEffectiveDate) :
                new ObjectParameter("NotificationEffectiveDate", typeof(System.DateTime));
    
            var notificationTypeIdParameter = notificationTypeId.HasValue ?
                new ObjectParameter("NotificationTypeId", notificationTypeId) :
                new ObjectParameter("NotificationTypeId", typeof(int));
    
            var gSRNoParameter = gSRNo != null ?
                new ObjectParameter("GSRNo", gSRNo) :
                new ObjectParameter("GSRNo", typeof(string));
    
            var gSRDateParameter = gSRDate.HasValue ?
                new ObjectParameter("GSRDate", gSRDate) :
                new ObjectParameter("GSRDate", typeof(System.DateTime));
    
            var notificationPDFParameter = notificationPDF != null ?
                new ObjectParameter("NotificationPDF", notificationPDF) :
                new ObjectParameter("NotificationPDF", typeof(string));
    
            var gSRPDFParameter = gSRPDF != null ?
                new ObjectParameter("GSRPDF", gSRPDF) :
                new ObjectParameter("GSRPDF", typeof(string));
    
            var sectorIdsParameter = sectorIds != null ?
                new ObjectParameter("SectorIds", sectorIds) :
                new ObjectParameter("SectorIds", typeof(string));
    
            var subSectorIdsParameter = subSectorIds != null ?
                new ObjectParameter("SubSectorIds", subSectorIds) :
                new ObjectParameter("SubSectorIds", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NotificationUpdate", notificationIdParameter, regulationidParameter, masterDirectionIdParameter, notificationNoParameter, notificationNameParameter, notificationDateParameter, notificationEffectiveDateParameter, notificationTypeIdParameter, gSRNoParameter, gSRDateParameter, notificationPDFParameter, gSRPDFParameter, sectorIdsParameter, subSectorIdsParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<NotificationTypeGet_Result> NotificationTypeGet(Nullable<int> notificationTypeId)
        {
            var notificationTypeIdParameter = notificationTypeId.HasValue ?
                new ObjectParameter("NotificationTypeId", notificationTypeId) :
                new ObjectParameter("NotificationTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NotificationTypeGet_Result>("NotificationTypeGet", notificationTypeIdParameter);
        }
    
        public virtual int IndexAmendmentAdd(Nullable<int> regulationid, string notificationIds, Nullable<int> indexId, Nullable<int> subIndexId, string indexAmendmentContent, Nullable<int> createdBy, ObjectParameter result)
        {
            var regulationidParameter = regulationid.HasValue ?
                new ObjectParameter("Regulationid", regulationid) :
                new ObjectParameter("Regulationid", typeof(int));
    
            var notificationIdsParameter = notificationIds != null ?
                new ObjectParameter("NotificationIds", notificationIds) :
                new ObjectParameter("NotificationIds", typeof(string));
    
            var indexIdParameter = indexId.HasValue ?
                new ObjectParameter("IndexId", indexId) :
                new ObjectParameter("IndexId", typeof(int));
    
            var subIndexIdParameter = subIndexId.HasValue ?
                new ObjectParameter("SubIndexId", subIndexId) :
                new ObjectParameter("SubIndexId", typeof(int));
    
            var indexAmendmentContentParameter = indexAmendmentContent != null ?
                new ObjectParameter("IndexAmendmentContent", indexAmendmentContent) :
                new ObjectParameter("IndexAmendmentContent", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IndexAmendmentAdd", regulationidParameter, notificationIdsParameter, indexIdParameter, subIndexIdParameter, indexAmendmentContentParameter, createdByParameter, result);
        }
    
        public virtual int IndexAmendmentDelete(Nullable<int> indexAmendmentId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var indexAmendmentIdParameter = indexAmendmentId.HasValue ?
                new ObjectParameter("IndexAmendmentId", indexAmendmentId) :
                new ObjectParameter("IndexAmendmentId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IndexAmendmentDelete", indexAmendmentIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<IndexAmendmentGet_Result> IndexAmendmentGet(Nullable<int> indexAmendmentId, Nullable<int> regulationid, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var indexAmendmentIdParameter = indexAmendmentId.HasValue ?
                new ObjectParameter("IndexAmendmentId", indexAmendmentId) :
                new ObjectParameter("IndexAmendmentId", typeof(int));
    
            var regulationidParameter = regulationid.HasValue ?
                new ObjectParameter("Regulationid", regulationid) :
                new ObjectParameter("Regulationid", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<IndexAmendmentGet_Result>("IndexAmendmentGet", indexAmendmentIdParameter, regulationidParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int IndexAmendmentUpdate(Nullable<int> indexAmendmentId, Nullable<int> regulationid, string notificationIds, Nullable<int> indexId, Nullable<int> subIndexId, string indexAmendmentContent, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var indexAmendmentIdParameter = indexAmendmentId.HasValue ?
                new ObjectParameter("IndexAmendmentId", indexAmendmentId) :
                new ObjectParameter("IndexAmendmentId", typeof(int));
    
            var regulationidParameter = regulationid.HasValue ?
                new ObjectParameter("Regulationid", regulationid) :
                new ObjectParameter("Regulationid", typeof(int));
    
            var notificationIdsParameter = notificationIds != null ?
                new ObjectParameter("NotificationIds", notificationIds) :
                new ObjectParameter("NotificationIds", typeof(string));
    
            var indexIdParameter = indexId.HasValue ?
                new ObjectParameter("IndexId", indexId) :
                new ObjectParameter("IndexId", typeof(int));
    
            var subIndexIdParameter = subIndexId.HasValue ?
                new ObjectParameter("SubIndexId", subIndexId) :
                new ObjectParameter("SubIndexId", typeof(int));
    
            var indexAmendmentContentParameter = indexAmendmentContent != null ?
                new ObjectParameter("IndexAmendmentContent", indexAmendmentContent) :
                new ObjectParameter("IndexAmendmentContent", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IndexAmendmentUpdate", indexAmendmentIdParameter, regulationidParameter, notificationIdsParameter, indexIdParameter, subIndexIdParameter, indexAmendmentContentParameter, modifiedByParameter, result);
        }
    
        public virtual int APDIRCircularAdd(Nullable<int> masterDirectionId, string aPDIRCircularNo, string aPDIRCircularName, Nullable<System.DateTime> aPDIRCircularDate, Nullable<System.DateTime> aPDIRCircularEffectiveDate, string year, string pDF, string sectorIds, string subSectorIds, Nullable<int> createdBy, ObjectParameter result)
        {
            var masterDirectionIdParameter = masterDirectionId.HasValue ?
                new ObjectParameter("MasterDirectionId", masterDirectionId) :
                new ObjectParameter("MasterDirectionId", typeof(int));
    
            var aPDIRCircularNoParameter = aPDIRCircularNo != null ?
                new ObjectParameter("APDIRCircularNo", aPDIRCircularNo) :
                new ObjectParameter("APDIRCircularNo", typeof(string));
    
            var aPDIRCircularNameParameter = aPDIRCircularName != null ?
                new ObjectParameter("APDIRCircularName", aPDIRCircularName) :
                new ObjectParameter("APDIRCircularName", typeof(string));
    
            var aPDIRCircularDateParameter = aPDIRCircularDate.HasValue ?
                new ObjectParameter("APDIRCircularDate", aPDIRCircularDate) :
                new ObjectParameter("APDIRCircularDate", typeof(System.DateTime));
    
            var aPDIRCircularEffectiveDateParameter = aPDIRCircularEffectiveDate.HasValue ?
                new ObjectParameter("APDIRCircularEffectiveDate", aPDIRCircularEffectiveDate) :
                new ObjectParameter("APDIRCircularEffectiveDate", typeof(System.DateTime));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var pDFParameter = pDF != null ?
                new ObjectParameter("PDF", pDF) :
                new ObjectParameter("PDF", typeof(string));
    
            var sectorIdsParameter = sectorIds != null ?
                new ObjectParameter("SectorIds", sectorIds) :
                new ObjectParameter("SectorIds", typeof(string));
    
            var subSectorIdsParameter = subSectorIds != null ?
                new ObjectParameter("SubSectorIds", subSectorIds) :
                new ObjectParameter("SubSectorIds", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("APDIRCircularAdd", masterDirectionIdParameter, aPDIRCircularNoParameter, aPDIRCircularNameParameter, aPDIRCircularDateParameter, aPDIRCircularEffectiveDateParameter, yearParameter, pDFParameter, sectorIdsParameter, subSectorIdsParameter, createdByParameter, result);
        }
    
        public virtual int APDIRCircularDelete(Nullable<int> aPDIRCircularId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var aPDIRCircularIdParameter = aPDIRCircularId.HasValue ?
                new ObjectParameter("APDIRCircularId", aPDIRCircularId) :
                new ObjectParameter("APDIRCircularId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("APDIRCircularDelete", aPDIRCircularIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<APDIRCircularGet_Result> APDIRCircularGet(Nullable<int> aPDIRCircularId, Nullable<int> masterDirectionId, string year, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var aPDIRCircularIdParameter = aPDIRCircularId.HasValue ?
                new ObjectParameter("APDIRCircularId", aPDIRCircularId) :
                new ObjectParameter("APDIRCircularId", typeof(int));
    
            var masterDirectionIdParameter = masterDirectionId.HasValue ?
                new ObjectParameter("MasterDirectionId", masterDirectionId) :
                new ObjectParameter("MasterDirectionId", typeof(int));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<APDIRCircularGet_Result>("APDIRCircularGet", aPDIRCircularIdParameter, masterDirectionIdParameter, yearParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int APDIRCircularUpdate(Nullable<int> aPDIRCircularId, Nullable<int> masterDirectionId, string aPDIRCircularNo, string aPDIRCircularName, Nullable<System.DateTime> aPDIRCircularDate, Nullable<System.DateTime> aPDIRCircularEffectiveDate, string year, string pDF, string sectorIds, string subSectorIds, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var aPDIRCircularIdParameter = aPDIRCircularId.HasValue ?
                new ObjectParameter("APDIRCircularId", aPDIRCircularId) :
                new ObjectParameter("APDIRCircularId", typeof(int));
    
            var masterDirectionIdParameter = masterDirectionId.HasValue ?
                new ObjectParameter("MasterDirectionId", masterDirectionId) :
                new ObjectParameter("MasterDirectionId", typeof(int));
    
            var aPDIRCircularNoParameter = aPDIRCircularNo != null ?
                new ObjectParameter("APDIRCircularNo", aPDIRCircularNo) :
                new ObjectParameter("APDIRCircularNo", typeof(string));
    
            var aPDIRCircularNameParameter = aPDIRCircularName != null ?
                new ObjectParameter("APDIRCircularName", aPDIRCircularName) :
                new ObjectParameter("APDIRCircularName", typeof(string));
    
            var aPDIRCircularDateParameter = aPDIRCircularDate.HasValue ?
                new ObjectParameter("APDIRCircularDate", aPDIRCircularDate) :
                new ObjectParameter("APDIRCircularDate", typeof(System.DateTime));
    
            var aPDIRCircularEffectiveDateParameter = aPDIRCircularEffectiveDate.HasValue ?
                new ObjectParameter("APDIRCircularEffectiveDate", aPDIRCircularEffectiveDate) :
                new ObjectParameter("APDIRCircularEffectiveDate", typeof(System.DateTime));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var pDFParameter = pDF != null ?
                new ObjectParameter("PDF", pDF) :
                new ObjectParameter("PDF", typeof(string));
    
            var sectorIdsParameter = sectorIds != null ?
                new ObjectParameter("SectorIds", sectorIds) :
                new ObjectParameter("SectorIds", typeof(string));
    
            var subSectorIdsParameter = subSectorIds != null ?
                new ObjectParameter("SubSectorIds", subSectorIds) :
                new ObjectParameter("SubSectorIds", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("APDIRCircularUpdate", aPDIRCircularIdParameter, masterDirectionIdParameter, aPDIRCircularNoParameter, aPDIRCircularNameParameter, aPDIRCircularDateParameter, aPDIRCircularEffectiveDateParameter, yearParameter, pDFParameter, sectorIdsParameter, subSectorIdsParameter, modifiedByParameter, result);
        }
    
        public virtual int APDIRCircularAfterAdd(Nullable<int> aPDIRCircularParentId, Nullable<int> aPDIRCircularId, Nullable<int> createdBy, ObjectParameter result)
        {
            var aPDIRCircularParentIdParameter = aPDIRCircularParentId.HasValue ?
                new ObjectParameter("APDIRCircularParentId", aPDIRCircularParentId) :
                new ObjectParameter("APDIRCircularParentId", typeof(int));
    
            var aPDIRCircularIdParameter = aPDIRCircularId.HasValue ?
                new ObjectParameter("APDIRCircularId", aPDIRCircularId) :
                new ObjectParameter("APDIRCircularId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("APDIRCircularAfterAdd", aPDIRCircularParentIdParameter, aPDIRCircularIdParameter, createdByParameter, result);
        }
    
        public virtual int APDIRCircularAfterDelete(Nullable<int> aPDIRCircularAfterId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var aPDIRCircularAfterIdParameter = aPDIRCircularAfterId.HasValue ?
                new ObjectParameter("APDIRCircularAfterId", aPDIRCircularAfterId) :
                new ObjectParameter("APDIRCircularAfterId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("APDIRCircularAfterDelete", aPDIRCircularAfterIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<APDIRCircularAfterGet_Result> APDIRCircularAfterGet(Nullable<int> aPDIRCircularAfterId, Nullable<int> aPDIRCircularParentId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var aPDIRCircularAfterIdParameter = aPDIRCircularAfterId.HasValue ?
                new ObjectParameter("APDIRCircularAfterId", aPDIRCircularAfterId) :
                new ObjectParameter("APDIRCircularAfterId", typeof(int));
    
            var aPDIRCircularParentIdParameter = aPDIRCircularParentId.HasValue ?
                new ObjectParameter("APDIRCircularParentId", aPDIRCircularParentId) :
                new ObjectParameter("APDIRCircularParentId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<APDIRCircularAfterGet_Result>("APDIRCircularAfterGet", aPDIRCircularAfterIdParameter, aPDIRCircularParentIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int APDIRCircularAfterUpdate(Nullable<int> aPDIRCircularAfterId, Nullable<int> aPDIRCircularParentId, Nullable<int> aPDIRCircularId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var aPDIRCircularAfterIdParameter = aPDIRCircularAfterId.HasValue ?
                new ObjectParameter("APDIRCircularAfterId", aPDIRCircularAfterId) :
                new ObjectParameter("APDIRCircularAfterId", typeof(int));
    
            var aPDIRCircularParentIdParameter = aPDIRCircularParentId.HasValue ?
                new ObjectParameter("APDIRCircularParentId", aPDIRCircularParentId) :
                new ObjectParameter("APDIRCircularParentId", typeof(int));
    
            var aPDIRCircularIdParameter = aPDIRCircularId.HasValue ?
                new ObjectParameter("APDIRCircularId", aPDIRCircularId) :
                new ObjectParameter("APDIRCircularId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("APDIRCircularAfterUpdate", aPDIRCircularAfterIdParameter, aPDIRCircularParentIdParameter, aPDIRCircularIdParameter, modifiedByParameter, result);
        }
    
        public virtual int APDIRCircularBeforeAdd(Nullable<int> aPDIRCircularParentId, Nullable<int> aPDIRCircularId, Nullable<int> createdBy, ObjectParameter result)
        {
            var aPDIRCircularParentIdParameter = aPDIRCircularParentId.HasValue ?
                new ObjectParameter("APDIRCircularParentId", aPDIRCircularParentId) :
                new ObjectParameter("APDIRCircularParentId", typeof(int));
    
            var aPDIRCircularIdParameter = aPDIRCircularId.HasValue ?
                new ObjectParameter("APDIRCircularId", aPDIRCircularId) :
                new ObjectParameter("APDIRCircularId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("APDIRCircularBeforeAdd", aPDIRCircularParentIdParameter, aPDIRCircularIdParameter, createdByParameter, result);
        }
    
        public virtual int APDIRCircularBeforeDelete(Nullable<int> aPDIRCircularBeforeId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var aPDIRCircularBeforeIdParameter = aPDIRCircularBeforeId.HasValue ?
                new ObjectParameter("APDIRCircularBeforeId", aPDIRCircularBeforeId) :
                new ObjectParameter("APDIRCircularBeforeId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("APDIRCircularBeforeDelete", aPDIRCircularBeforeIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<APDIRCircularBeforeGet_Result> APDIRCircularBeforeGet(Nullable<int> aPDIRCircularBeforeId, Nullable<int> aPDIRCircularParentId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var aPDIRCircularBeforeIdParameter = aPDIRCircularBeforeId.HasValue ?
                new ObjectParameter("APDIRCircularBeforeId", aPDIRCircularBeforeId) :
                new ObjectParameter("APDIRCircularBeforeId", typeof(int));
    
            var aPDIRCircularParentIdParameter = aPDIRCircularParentId.HasValue ?
                new ObjectParameter("APDIRCircularParentId", aPDIRCircularParentId) :
                new ObjectParameter("APDIRCircularParentId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<APDIRCircularBeforeGet_Result>("APDIRCircularBeforeGet", aPDIRCircularBeforeIdParameter, aPDIRCircularParentIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int APDIRCircularBeforeUpdate(Nullable<int> aPDIRCircularBeforeId, Nullable<int> aPDIRCircularParentId, Nullable<int> aPDIRCircularId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var aPDIRCircularBeforeIdParameter = aPDIRCircularBeforeId.HasValue ?
                new ObjectParameter("APDIRCircularBeforeId", aPDIRCircularBeforeId) :
                new ObjectParameter("APDIRCircularBeforeId", typeof(int));
    
            var aPDIRCircularParentIdParameter = aPDIRCircularParentId.HasValue ?
                new ObjectParameter("APDIRCircularParentId", aPDIRCircularParentId) :
                new ObjectParameter("APDIRCircularParentId", typeof(int));
    
            var aPDIRCircularIdParameter = aPDIRCircularId.HasValue ?
                new ObjectParameter("APDIRCircularId", aPDIRCircularId) :
                new ObjectParameter("APDIRCircularId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("APDIRCircularBeforeUpdate", aPDIRCircularBeforeIdParameter, aPDIRCircularParentIdParameter, aPDIRCircularIdParameter, modifiedByParameter, result);
        }
    
        public virtual int PressNoteAdd(string pressNoteNo, string pressNoteName, Nullable<System.DateTime> pressNoteDate, Nullable<System.DateTime> pressNoteEffectiveDate, string year, string pDF, string sectorIds, string subSectorIds, Nullable<int> createdBy, ObjectParameter result)
        {
            var pressNoteNoParameter = pressNoteNo != null ?
                new ObjectParameter("PressNoteNo", pressNoteNo) :
                new ObjectParameter("PressNoteNo", typeof(string));
    
            var pressNoteNameParameter = pressNoteName != null ?
                new ObjectParameter("PressNoteName", pressNoteName) :
                new ObjectParameter("PressNoteName", typeof(string));
    
            var pressNoteDateParameter = pressNoteDate.HasValue ?
                new ObjectParameter("PressNoteDate", pressNoteDate) :
                new ObjectParameter("PressNoteDate", typeof(System.DateTime));
    
            var pressNoteEffectiveDateParameter = pressNoteEffectiveDate.HasValue ?
                new ObjectParameter("PressNoteEffectiveDate", pressNoteEffectiveDate) :
                new ObjectParameter("PressNoteEffectiveDate", typeof(System.DateTime));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var pDFParameter = pDF != null ?
                new ObjectParameter("PDF", pDF) :
                new ObjectParameter("PDF", typeof(string));
    
            var sectorIdsParameter = sectorIds != null ?
                new ObjectParameter("SectorIds", sectorIds) :
                new ObjectParameter("SectorIds", typeof(string));
    
            var subSectorIdsParameter = subSectorIds != null ?
                new ObjectParameter("SubSectorIds", subSectorIds) :
                new ObjectParameter("SubSectorIds", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PressNoteAdd", pressNoteNoParameter, pressNoteNameParameter, pressNoteDateParameter, pressNoteEffectiveDateParameter, yearParameter, pDFParameter, sectorIdsParameter, subSectorIdsParameter, createdByParameter, result);
        }
    
        public virtual int PressNoteDelete(Nullable<int> pressNoteId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var pressNoteIdParameter = pressNoteId.HasValue ?
                new ObjectParameter("PressNoteId", pressNoteId) :
                new ObjectParameter("PressNoteId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PressNoteDelete", pressNoteIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<PressNoteGet_Result> PressNoteGet(Nullable<int> pressNoteId, string year, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var pressNoteIdParameter = pressNoteId.HasValue ?
                new ObjectParameter("PressNoteId", pressNoteId) :
                new ObjectParameter("PressNoteId", typeof(int));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PressNoteGet_Result>("PressNoteGet", pressNoteIdParameter, yearParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int PressNoteUpdate(Nullable<int> pressNoteId, string pressNoteNo, string pressNoteName, Nullable<System.DateTime> pressNoteDate, Nullable<System.DateTime> pressNoteEffectiveDate, string year, string pDF, string sectorIds, string subSectorIds, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var pressNoteIdParameter = pressNoteId.HasValue ?
                new ObjectParameter("PressNoteId", pressNoteId) :
                new ObjectParameter("PressNoteId", typeof(int));
    
            var pressNoteNoParameter = pressNoteNo != null ?
                new ObjectParameter("PressNoteNo", pressNoteNo) :
                new ObjectParameter("PressNoteNo", typeof(string));
    
            var pressNoteNameParameter = pressNoteName != null ?
                new ObjectParameter("PressNoteName", pressNoteName) :
                new ObjectParameter("PressNoteName", typeof(string));
    
            var pressNoteDateParameter = pressNoteDate.HasValue ?
                new ObjectParameter("PressNoteDate", pressNoteDate) :
                new ObjectParameter("PressNoteDate", typeof(System.DateTime));
    
            var pressNoteEffectiveDateParameter = pressNoteEffectiveDate.HasValue ?
                new ObjectParameter("PressNoteEffectiveDate", pressNoteEffectiveDate) :
                new ObjectParameter("PressNoteEffectiveDate", typeof(System.DateTime));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var pDFParameter = pDF != null ?
                new ObjectParameter("PDF", pDF) :
                new ObjectParameter("PDF", typeof(string));
    
            var sectorIdsParameter = sectorIds != null ?
                new ObjectParameter("SectorIds", sectorIds) :
                new ObjectParameter("SectorIds", typeof(string));
    
            var subSectorIdsParameter = subSectorIds != null ?
                new ObjectParameter("SubSectorIds", subSectorIds) :
                new ObjectParameter("SubSectorIds", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PressNoteUpdate", pressNoteIdParameter, pressNoteNoParameter, pressNoteNameParameter, pressNoteDateParameter, pressNoteEffectiveDateParameter, yearParameter, pDFParameter, sectorIdsParameter, subSectorIdsParameter, modifiedByParameter, result);
        }
    
        public virtual int PressNoteAPDIRCircularAdd(Nullable<int> pressNoteId, Nullable<int> aPDIRCircularId, Nullable<int> createdBy, ObjectParameter result)
        {
            var pressNoteIdParameter = pressNoteId.HasValue ?
                new ObjectParameter("PressNoteId", pressNoteId) :
                new ObjectParameter("PressNoteId", typeof(int));
    
            var aPDIRCircularIdParameter = aPDIRCircularId.HasValue ?
                new ObjectParameter("APDIRCircularId", aPDIRCircularId) :
                new ObjectParameter("APDIRCircularId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PressNoteAPDIRCircularAdd", pressNoteIdParameter, aPDIRCircularIdParameter, createdByParameter, result);
        }
    
        public virtual int PressNoteAPDIRCircularDelete(Nullable<int> pressNoteAPDIRCircularId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var pressNoteAPDIRCircularIdParameter = pressNoteAPDIRCircularId.HasValue ?
                new ObjectParameter("PressNoteAPDIRCircularId", pressNoteAPDIRCircularId) :
                new ObjectParameter("PressNoteAPDIRCircularId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PressNoteAPDIRCircularDelete", pressNoteAPDIRCircularIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<PressNoteAPDIRCircularGet_Result> PressNoteAPDIRCircularGet(Nullable<int> pressNoteAPDIRCircularId, Nullable<int> pressNoteId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var pressNoteAPDIRCircularIdParameter = pressNoteAPDIRCircularId.HasValue ?
                new ObjectParameter("PressNoteAPDIRCircularId", pressNoteAPDIRCircularId) :
                new ObjectParameter("PressNoteAPDIRCircularId", typeof(int));
    
            var pressNoteIdParameter = pressNoteId.HasValue ?
                new ObjectParameter("PressNoteId", pressNoteId) :
                new ObjectParameter("PressNoteId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PressNoteAPDIRCircularGet_Result>("PressNoteAPDIRCircularGet", pressNoteAPDIRCircularIdParameter, pressNoteIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int PressNoteAPDIRCircularUpdate(Nullable<int> pressNoteAPDIRCircularId, Nullable<int> pressNoteId, Nullable<int> aPDIRCircularId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var pressNoteAPDIRCircularIdParameter = pressNoteAPDIRCircularId.HasValue ?
                new ObjectParameter("PressNoteAPDIRCircularId", pressNoteAPDIRCircularId) :
                new ObjectParameter("PressNoteAPDIRCircularId", typeof(int));
    
            var pressNoteIdParameter = pressNoteId.HasValue ?
                new ObjectParameter("PressNoteId", pressNoteId) :
                new ObjectParameter("PressNoteId", typeof(int));
    
            var aPDIRCircularIdParameter = aPDIRCircularId.HasValue ?
                new ObjectParameter("APDIRCircularId", aPDIRCircularId) :
                new ObjectParameter("APDIRCircularId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PressNoteAPDIRCircularUpdate", pressNoteAPDIRCircularIdParameter, pressNoteIdParameter, aPDIRCircularIdParameter, modifiedByParameter, result);
        }
    
        public virtual int PressNoteNotificationAdd(Nullable<int> pressNoteId, Nullable<int> notificationId, Nullable<int> createdBy, ObjectParameter result)
        {
            var pressNoteIdParameter = pressNoteId.HasValue ?
                new ObjectParameter("PressNoteId", pressNoteId) :
                new ObjectParameter("PressNoteId", typeof(int));
    
            var notificationIdParameter = notificationId.HasValue ?
                new ObjectParameter("NotificationId", notificationId) :
                new ObjectParameter("NotificationId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PressNoteNotificationAdd", pressNoteIdParameter, notificationIdParameter, createdByParameter, result);
        }
    
        public virtual int PressNoteNotificationDelete(Nullable<int> pressNoteNotificationId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var pressNoteNotificationIdParameter = pressNoteNotificationId.HasValue ?
                new ObjectParameter("PressNoteNotificationId", pressNoteNotificationId) :
                new ObjectParameter("PressNoteNotificationId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PressNoteNotificationDelete", pressNoteNotificationIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<PressNoteNotificationGet_Result> PressNoteNotificationGet(Nullable<int> pressNoteNotificationId, Nullable<int> pressNoteId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var pressNoteNotificationIdParameter = pressNoteNotificationId.HasValue ?
                new ObjectParameter("PressNoteNotificationId", pressNoteNotificationId) :
                new ObjectParameter("PressNoteNotificationId", typeof(int));
    
            var pressNoteIdParameter = pressNoteId.HasValue ?
                new ObjectParameter("PressNoteId", pressNoteId) :
                new ObjectParameter("PressNoteId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PressNoteNotificationGet_Result>("PressNoteNotificationGet", pressNoteNotificationIdParameter, pressNoteIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int PressNoteNotificationUpdate(Nullable<int> pressNoteNotificationId, Nullable<int> pressNoteId, Nullable<int> notificationId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var pressNoteNotificationIdParameter = pressNoteNotificationId.HasValue ?
                new ObjectParameter("PressNoteNotificationId", pressNoteNotificationId) :
                new ObjectParameter("PressNoteNotificationId", typeof(int));
    
            var pressNoteIdParameter = pressNoteId.HasValue ?
                new ObjectParameter("PressNoteId", pressNoteId) :
                new ObjectParameter("PressNoteId", typeof(int));
    
            var notificationIdParameter = notificationId.HasValue ?
                new ObjectParameter("NotificationId", notificationId) :
                new ObjectParameter("NotificationId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PressNoteNotificationUpdate", pressNoteNotificationIdParameter, pressNoteIdParameter, notificationIdParameter, modifiedByParameter, result);
        }
    
        public virtual int FDICircularAdd(string fDICircularName, string pDF, string year, Nullable<int> createdBy, ObjectParameter result)
        {
            var fDICircularNameParameter = fDICircularName != null ?
                new ObjectParameter("FDICircularName", fDICircularName) :
                new ObjectParameter("FDICircularName", typeof(string));
    
            var pDFParameter = pDF != null ?
                new ObjectParameter("PDF", pDF) :
                new ObjectParameter("PDF", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FDICircularAdd", fDICircularNameParameter, pDFParameter, yearParameter, createdByParameter, result);
        }
    
        public virtual int FDICircularDelete(Nullable<int> fDICircularId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var fDICircularIdParameter = fDICircularId.HasValue ?
                new ObjectParameter("FDICircularId", fDICircularId) :
                new ObjectParameter("FDICircularId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FDICircularDelete", fDICircularIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<FDICircularGet_Result> FDICircularGet(Nullable<int> fDICircularId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var fDICircularIdParameter = fDICircularId.HasValue ?
                new ObjectParameter("FDICircularId", fDICircularId) :
                new ObjectParameter("FDICircularId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FDICircularGet_Result>("FDICircularGet", fDICircularIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int FDICircularIndexAdd(Nullable<int> fDIChapterId, string indexNo, string indexName, string indexContent, Nullable<int> saveAfterIndexId, Nullable<int> createdBy, ObjectParameter result)
        {
            var fDIChapterIdParameter = fDIChapterId.HasValue ?
                new ObjectParameter("FDIChapterId", fDIChapterId) :
                new ObjectParameter("FDIChapterId", typeof(int));
    
            var indexNoParameter = indexNo != null ?
                new ObjectParameter("IndexNo", indexNo) :
                new ObjectParameter("IndexNo", typeof(string));
    
            var indexNameParameter = indexName != null ?
                new ObjectParameter("IndexName", indexName) :
                new ObjectParameter("IndexName", typeof(string));
    
            var indexContentParameter = indexContent != null ?
                new ObjectParameter("IndexContent", indexContent) :
                new ObjectParameter("IndexContent", typeof(string));
    
            var saveAfterIndexIdParameter = saveAfterIndexId.HasValue ?
                new ObjectParameter("SaveAfterIndexId", saveAfterIndexId) :
                new ObjectParameter("SaveAfterIndexId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FDICircularIndexAdd", fDIChapterIdParameter, indexNoParameter, indexNameParameter, indexContentParameter, saveAfterIndexIdParameter, createdByParameter, result);
        }
    
        public virtual int FDICircularIndexAmendmentAdd(Nullable<int> fDICircularId, string pressNoteIds, Nullable<int> fDIChapterId, Nullable<int> indexId, Nullable<int> subIndexId, string indexAmendmentContent, string year, Nullable<int> createdBy, ObjectParameter result)
        {
            var fDICircularIdParameter = fDICircularId.HasValue ?
                new ObjectParameter("FDICircularId", fDICircularId) :
                new ObjectParameter("FDICircularId", typeof(int));
    
            var pressNoteIdsParameter = pressNoteIds != null ?
                new ObjectParameter("PressNoteIds", pressNoteIds) :
                new ObjectParameter("PressNoteIds", typeof(string));
    
            var fDIChapterIdParameter = fDIChapterId.HasValue ?
                new ObjectParameter("FDIChapterId", fDIChapterId) :
                new ObjectParameter("FDIChapterId", typeof(int));
    
            var indexIdParameter = indexId.HasValue ?
                new ObjectParameter("IndexId", indexId) :
                new ObjectParameter("IndexId", typeof(int));
    
            var subIndexIdParameter = subIndexId.HasValue ?
                new ObjectParameter("SubIndexId", subIndexId) :
                new ObjectParameter("SubIndexId", typeof(int));
    
            var indexAmendmentContentParameter = indexAmendmentContent != null ?
                new ObjectParameter("IndexAmendmentContent", indexAmendmentContent) :
                new ObjectParameter("IndexAmendmentContent", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FDICircularIndexAmendmentAdd", fDICircularIdParameter, pressNoteIdsParameter, fDIChapterIdParameter, indexIdParameter, subIndexIdParameter, indexAmendmentContentParameter, yearParameter, createdByParameter, result);
        }
    
        public virtual int FDICircularIndexAmendmentDelete(Nullable<int> fDICircularIndexAmendmentId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var fDICircularIndexAmendmentIdParameter = fDICircularIndexAmendmentId.HasValue ?
                new ObjectParameter("FDICircularIndexAmendmentId", fDICircularIndexAmendmentId) :
                new ObjectParameter("FDICircularIndexAmendmentId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FDICircularIndexAmendmentDelete", fDICircularIndexAmendmentIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<FDICircularIndexAmendmentGet_Result> FDICircularIndexAmendmentGet(Nullable<int> fDICircularIndexAmendmentId, Nullable<int> fDICircularId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var fDICircularIndexAmendmentIdParameter = fDICircularIndexAmendmentId.HasValue ?
                new ObjectParameter("FDICircularIndexAmendmentId", fDICircularIndexAmendmentId) :
                new ObjectParameter("FDICircularIndexAmendmentId", typeof(int));
    
            var fDICircularIdParameter = fDICircularId.HasValue ?
                new ObjectParameter("FDICircularId", fDICircularId) :
                new ObjectParameter("FDICircularId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FDICircularIndexAmendmentGet_Result>("FDICircularIndexAmendmentGet", fDICircularIndexAmendmentIdParameter, fDICircularIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int FDICircularIndexAmendmentUpdate(Nullable<int> fDICircularIndexAmendmentId, Nullable<int> fDICircularId, string pressNoteIds, Nullable<int> fDIChapterId, Nullable<int> fDICircularIndexId, Nullable<int> fDICircularSubIndexId, string indexAmendmentContent, string year, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var fDICircularIndexAmendmentIdParameter = fDICircularIndexAmendmentId.HasValue ?
                new ObjectParameter("FDICircularIndexAmendmentId", fDICircularIndexAmendmentId) :
                new ObjectParameter("FDICircularIndexAmendmentId", typeof(int));
    
            var fDICircularIdParameter = fDICircularId.HasValue ?
                new ObjectParameter("FDICircularId", fDICircularId) :
                new ObjectParameter("FDICircularId", typeof(int));
    
            var pressNoteIdsParameter = pressNoteIds != null ?
                new ObjectParameter("PressNoteIds", pressNoteIds) :
                new ObjectParameter("PressNoteIds", typeof(string));
    
            var fDIChapterIdParameter = fDIChapterId.HasValue ?
                new ObjectParameter("FDIChapterId", fDIChapterId) :
                new ObjectParameter("FDIChapterId", typeof(int));
    
            var fDICircularIndexIdParameter = fDICircularIndexId.HasValue ?
                new ObjectParameter("FDICircularIndexId", fDICircularIndexId) :
                new ObjectParameter("FDICircularIndexId", typeof(int));
    
            var fDICircularSubIndexIdParameter = fDICircularSubIndexId.HasValue ?
                new ObjectParameter("FDICircularSubIndexId", fDICircularSubIndexId) :
                new ObjectParameter("FDICircularSubIndexId", typeof(int));
    
            var indexAmendmentContentParameter = indexAmendmentContent != null ?
                new ObjectParameter("IndexAmendmentContent", indexAmendmentContent) :
                new ObjectParameter("IndexAmendmentContent", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FDICircularIndexAmendmentUpdate", fDICircularIndexAmendmentIdParameter, fDICircularIdParameter, pressNoteIdsParameter, fDIChapterIdParameter, fDICircularIndexIdParameter, fDICircularSubIndexIdParameter, indexAmendmentContentParameter, yearParameter, modifiedByParameter, result);
        }
    
        public virtual int FDICircularIndexDelete(Nullable<int> fDICircularIndexId, Nullable<int> fDIChapterId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var fDICircularIndexIdParameter = fDICircularIndexId.HasValue ?
                new ObjectParameter("FDICircularIndexId", fDICircularIndexId) :
                new ObjectParameter("FDICircularIndexId", typeof(int));
    
            var fDIChapterIdParameter = fDIChapterId.HasValue ?
                new ObjectParameter("FDIChapterId", fDIChapterId) :
                new ObjectParameter("FDIChapterId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FDICircularIndexDelete", fDICircularIndexIdParameter, fDIChapterIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<FDICircularIndexGet_Result> FDICircularIndexGet(Nullable<int> fDICircularIndexId, Nullable<int> fDICircularId, Nullable<int> fDIChapterId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var fDICircularIndexIdParameter = fDICircularIndexId.HasValue ?
                new ObjectParameter("FDICircularIndexId", fDICircularIndexId) :
                new ObjectParameter("FDICircularIndexId", typeof(int));
    
            var fDICircularIdParameter = fDICircularId.HasValue ?
                new ObjectParameter("FDICircularId", fDICircularId) :
                new ObjectParameter("FDICircularId", typeof(int));
    
            var fDIChapterIdParameter = fDIChapterId.HasValue ?
                new ObjectParameter("FDIChapterId", fDIChapterId) :
                new ObjectParameter("FDIChapterId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FDICircularIndexGet_Result>("FDICircularIndexGet", fDICircularIndexIdParameter, fDICircularIdParameter, fDIChapterIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int FDICircularIndexUpdate(Nullable<int> fDICircularIndexId, Nullable<int> fDIChapterId, string indexNo, string indexname, string indexContent, Nullable<int> saveAfterIndexId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var fDICircularIndexIdParameter = fDICircularIndexId.HasValue ?
                new ObjectParameter("FDICircularIndexId", fDICircularIndexId) :
                new ObjectParameter("FDICircularIndexId", typeof(int));
    
            var fDIChapterIdParameter = fDIChapterId.HasValue ?
                new ObjectParameter("FDIChapterId", fDIChapterId) :
                new ObjectParameter("FDIChapterId", typeof(int));
    
            var indexNoParameter = indexNo != null ?
                new ObjectParameter("IndexNo", indexNo) :
                new ObjectParameter("IndexNo", typeof(string));
    
            var indexnameParameter = indexname != null ?
                new ObjectParameter("Indexname", indexname) :
                new ObjectParameter("Indexname", typeof(string));
    
            var indexContentParameter = indexContent != null ?
                new ObjectParameter("IndexContent", indexContent) :
                new ObjectParameter("IndexContent", typeof(string));
    
            var saveAfterIndexIdParameter = saveAfterIndexId.HasValue ?
                new ObjectParameter("SaveAfterIndexId", saveAfterIndexId) :
                new ObjectParameter("SaveAfterIndexId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FDICircularIndexUpdate", fDICircularIndexIdParameter, fDIChapterIdParameter, indexNoParameter, indexnameParameter, indexContentParameter, saveAfterIndexIdParameter, modifiedByParameter, result);
        }
    
        public virtual int FDICircularSubIndexAdd(Nullable<int> fDICircularIndexId, string subIndexNo, string subIndexName, string subIndexContent, Nullable<int> saveAfterSubIndexId, Nullable<int> createdBy, ObjectParameter result)
        {
            var fDICircularIndexIdParameter = fDICircularIndexId.HasValue ?
                new ObjectParameter("FDICircularIndexId", fDICircularIndexId) :
                new ObjectParameter("FDICircularIndexId", typeof(int));
    
            var subIndexNoParameter = subIndexNo != null ?
                new ObjectParameter("SubIndexNo", subIndexNo) :
                new ObjectParameter("SubIndexNo", typeof(string));
    
            var subIndexNameParameter = subIndexName != null ?
                new ObjectParameter("SubIndexName", subIndexName) :
                new ObjectParameter("SubIndexName", typeof(string));
    
            var subIndexContentParameter = subIndexContent != null ?
                new ObjectParameter("SubIndexContent", subIndexContent) :
                new ObjectParameter("SubIndexContent", typeof(string));
    
            var saveAfterSubIndexIdParameter = saveAfterSubIndexId.HasValue ?
                new ObjectParameter("SaveAfterSubIndexId", saveAfterSubIndexId) :
                new ObjectParameter("SaveAfterSubIndexId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FDICircularSubIndexAdd", fDICircularIndexIdParameter, subIndexNoParameter, subIndexNameParameter, subIndexContentParameter, saveAfterSubIndexIdParameter, createdByParameter, result);
        }
    
        public virtual int FDICircularSubIndexDelete(Nullable<int> fDICircularSubIndexId, Nullable<int> fDICircularIndexId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var fDICircularSubIndexIdParameter = fDICircularSubIndexId.HasValue ?
                new ObjectParameter("FDICircularSubIndexId", fDICircularSubIndexId) :
                new ObjectParameter("FDICircularSubIndexId", typeof(int));
    
            var fDICircularIndexIdParameter = fDICircularIndexId.HasValue ?
                new ObjectParameter("FDICircularIndexId", fDICircularIndexId) :
                new ObjectParameter("FDICircularIndexId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FDICircularSubIndexDelete", fDICircularSubIndexIdParameter, fDICircularIndexIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<FDICircularSubIndexGet_Result> FDICircularSubIndexGet(Nullable<int> fDICircularSubIndexId, Nullable<int> fDICircularId, Nullable<int> fDICircularIndexId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var fDICircularSubIndexIdParameter = fDICircularSubIndexId.HasValue ?
                new ObjectParameter("FDICircularSubIndexId", fDICircularSubIndexId) :
                new ObjectParameter("FDICircularSubIndexId", typeof(int));
    
            var fDICircularIdParameter = fDICircularId.HasValue ?
                new ObjectParameter("FDICircularId", fDICircularId) :
                new ObjectParameter("FDICircularId", typeof(int));
    
            var fDICircularIndexIdParameter = fDICircularIndexId.HasValue ?
                new ObjectParameter("FDICircularIndexId", fDICircularIndexId) :
                new ObjectParameter("FDICircularIndexId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FDICircularSubIndexGet_Result>("FDICircularSubIndexGet", fDICircularSubIndexIdParameter, fDICircularIdParameter, fDICircularIndexIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int FDICircularSubIndexUpdate(Nullable<int> fDICircularSubIndexId, Nullable<int> fDICircularIndexId, string subIndexNo, string subIndexName, string subIndexContent, Nullable<int> saveAfterSubIndexId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var fDICircularSubIndexIdParameter = fDICircularSubIndexId.HasValue ?
                new ObjectParameter("FDICircularSubIndexId", fDICircularSubIndexId) :
                new ObjectParameter("FDICircularSubIndexId", typeof(int));
    
            var fDICircularIndexIdParameter = fDICircularIndexId.HasValue ?
                new ObjectParameter("FDICircularIndexId", fDICircularIndexId) :
                new ObjectParameter("FDICircularIndexId", typeof(int));
    
            var subIndexNoParameter = subIndexNo != null ?
                new ObjectParameter("SubIndexNo", subIndexNo) :
                new ObjectParameter("SubIndexNo", typeof(string));
    
            var subIndexNameParameter = subIndexName != null ?
                new ObjectParameter("SubIndexName", subIndexName) :
                new ObjectParameter("SubIndexName", typeof(string));
    
            var subIndexContentParameter = subIndexContent != null ?
                new ObjectParameter("SubIndexContent", subIndexContent) :
                new ObjectParameter("SubIndexContent", typeof(string));
    
            var saveAfterSubIndexIdParameter = saveAfterSubIndexId.HasValue ?
                new ObjectParameter("SaveAfterSubIndexId", saveAfterSubIndexId) :
                new ObjectParameter("SaveAfterSubIndexId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FDICircularSubIndexUpdate", fDICircularSubIndexIdParameter, fDICircularIndexIdParameter, subIndexNoParameter, subIndexNameParameter, subIndexContentParameter, saveAfterSubIndexIdParameter, modifiedByParameter, result);
        }
    
        public virtual int FDICircularUpdate(Nullable<int> fDICircularId, string fDICircularName, string year, string pDF, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var fDICircularIdParameter = fDICircularId.HasValue ?
                new ObjectParameter("FDICircularId", fDICircularId) :
                new ObjectParameter("FDICircularId", typeof(int));
    
            var fDICircularNameParameter = fDICircularName != null ?
                new ObjectParameter("FDICircularName", fDICircularName) :
                new ObjectParameter("FDICircularName", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var pDFParameter = pDF != null ?
                new ObjectParameter("PDF", pDF) :
                new ObjectParameter("PDF", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FDICircularUpdate", fDICircularIdParameter, fDICircularNameParameter, yearParameter, pDFParameter, modifiedByParameter, result);
        }
    
        public virtual int SectorAdd(string name, Nullable<int> createdBy, ObjectParameter result)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SectorAdd", nameParameter, createdByParameter, result);
        }
    
        public virtual int SectorDelete(Nullable<int> sectorId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var sectorIdParameter = sectorId.HasValue ?
                new ObjectParameter("SectorId", sectorId) :
                new ObjectParameter("SectorId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SectorDelete", sectorIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<SectorGet_Result> SectorGet(Nullable<int> sectorId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var sectorIdParameter = sectorId.HasValue ?
                new ObjectParameter("SectorId", sectorId) :
                new ObjectParameter("SectorId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SectorGet_Result>("SectorGet", sectorIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int SectorUpdate(Nullable<int> sectorId, string name, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var sectorIdParameter = sectorId.HasValue ?
                new ObjectParameter("SectorId", sectorId) :
                new ObjectParameter("SectorId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SectorUpdate", sectorIdParameter, nameParameter, modifiedByParameter, result);
        }
    
        public virtual int SubSectorAdd(Nullable<int> sectorId, string name, Nullable<int> createdBy, ObjectParameter result)
        {
            var sectorIdParameter = sectorId.HasValue ?
                new ObjectParameter("SectorId", sectorId) :
                new ObjectParameter("SectorId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SubSectorAdd", sectorIdParameter, nameParameter, createdByParameter, result);
        }
    
        public virtual int SubSectorDelete(Nullable<int> subSectorId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var subSectorIdParameter = subSectorId.HasValue ?
                new ObjectParameter("SubSectorId", subSectorId) :
                new ObjectParameter("SubSectorId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SubSectorDelete", subSectorIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<SubSectorGet_Result> SubSectorGet(Nullable<int> subSectorId, string sectorIds, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var subSectorIdParameter = subSectorId.HasValue ?
                new ObjectParameter("SubSectorId", subSectorId) :
                new ObjectParameter("SubSectorId", typeof(int));
    
            var sectorIdsParameter = sectorIds != null ?
                new ObjectParameter("SectorIds", sectorIds) :
                new ObjectParameter("SectorIds", typeof(string));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SubSectorGet_Result>("SubSectorGet", subSectorIdParameter, sectorIdsParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int SubSectorUpdate(Nullable<int> subSectorId, Nullable<int> sectorId, string name, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var subSectorIdParameter = subSectorId.HasValue ?
                new ObjectParameter("SubSectorId", subSectorId) :
                new ObjectParameter("SubSectorId", typeof(int));
    
            var sectorIdParameter = sectorId.HasValue ?
                new ObjectParameter("SectorId", sectorId) :
                new ObjectParameter("SectorId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SubSectorUpdate", subSectorIdParameter, sectorIdParameter, nameParameter, modifiedByParameter, result);
        }
    
        public virtual int FDIChapterAdd(Nullable<int> fDICircularId, string chapter, Nullable<int> saveAfterChapterId, Nullable<int> createdBy, ObjectParameter result)
        {
            var fDICircularIdParameter = fDICircularId.HasValue ?
                new ObjectParameter("FDICircularId", fDICircularId) :
                new ObjectParameter("FDICircularId", typeof(int));
    
            var chapterParameter = chapter != null ?
                new ObjectParameter("Chapter", chapter) :
                new ObjectParameter("Chapter", typeof(string));
    
            var saveAfterChapterIdParameter = saveAfterChapterId.HasValue ?
                new ObjectParameter("SaveAfterChapterId", saveAfterChapterId) :
                new ObjectParameter("SaveAfterChapterId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FDIChapterAdd", fDICircularIdParameter, chapterParameter, saveAfterChapterIdParameter, createdByParameter, result);
        }
    
        public virtual int FDIChapterDelete(Nullable<int> fDIChapterId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var fDIChapterIdParameter = fDIChapterId.HasValue ?
                new ObjectParameter("FDIChapterId", fDIChapterId) :
                new ObjectParameter("FDIChapterId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FDIChapterDelete", fDIChapterIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<FDIChapterGet_Result> FDIChapterGet(Nullable<int> fDIChapterId, Nullable<int> fDICircularId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var fDIChapterIdParameter = fDIChapterId.HasValue ?
                new ObjectParameter("FDIChapterId", fDIChapterId) :
                new ObjectParameter("FDIChapterId", typeof(int));
    
            var fDICircularIdParameter = fDICircularId.HasValue ?
                new ObjectParameter("FDICircularId", fDICircularId) :
                new ObjectParameter("FDICircularId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FDIChapterGet_Result>("FDIChapterGet", fDIChapterIdParameter, fDICircularIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int FDIChapterUpdate(Nullable<int> fDIChapterId, Nullable<int> fDICircularId, string chapter, Nullable<int> saveAfterChapterId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var fDIChapterIdParameter = fDIChapterId.HasValue ?
                new ObjectParameter("FDIChapterId", fDIChapterId) :
                new ObjectParameter("FDIChapterId", typeof(int));
    
            var fDICircularIdParameter = fDICircularId.HasValue ?
                new ObjectParameter("FDICircularId", fDICircularId) :
                new ObjectParameter("FDICircularId", typeof(int));
    
            var chapterParameter = chapter != null ?
                new ObjectParameter("Chapter", chapter) :
                new ObjectParameter("Chapter", typeof(string));
    
            var saveAfterChapterIdParameter = saveAfterChapterId.HasValue ?
                new ObjectParameter("SaveAfterChapterId", saveAfterChapterId) :
                new ObjectParameter("SaveAfterChapterId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FDIChapterUpdate", fDIChapterIdParameter, fDICircularIdParameter, chapterParameter, saveAfterChapterIdParameter, modifiedByParameter, result);
        }
    
        public virtual int FAQAdd(Nullable<int> categoryId, string topicName, string pDF, Nullable<int> createdBy, ObjectParameter result)
        {
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            var topicNameParameter = topicName != null ?
                new ObjectParameter("TopicName", topicName) :
                new ObjectParameter("TopicName", typeof(string));
    
            var pDFParameter = pDF != null ?
                new ObjectParameter("PDF", pDF) :
                new ObjectParameter("PDF", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FAQAdd", categoryIdParameter, topicNameParameter, pDFParameter, createdByParameter, result);
        }
    
        public virtual int FAQDelete(Nullable<int> fAQId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var fAQIdParameter = fAQId.HasValue ?
                new ObjectParameter("FAQId", fAQId) :
                new ObjectParameter("FAQId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FAQDelete", fAQIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<FAQGet_Result> FAQGet(Nullable<int> fAQId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var fAQIdParameter = fAQId.HasValue ?
                new ObjectParameter("FAQId", fAQId) :
                new ObjectParameter("FAQId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FAQGet_Result>("FAQGet", fAQIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int FAQUpdate(Nullable<int> fAQId, Nullable<int> categoryId, string topicName, string pDF, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var fAQIdParameter = fAQId.HasValue ?
                new ObjectParameter("FAQId", fAQId) :
                new ObjectParameter("FAQId", typeof(int));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            var topicNameParameter = topicName != null ?
                new ObjectParameter("TopicName", topicName) :
                new ObjectParameter("TopicName", typeof(string));
    
            var pDFParameter = pDF != null ?
                new ObjectParameter("PDF", pDF) :
                new ObjectParameter("PDF", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FAQUpdate", fAQIdParameter, categoryIdParameter, topicNameParameter, pDFParameter, modifiedByParameter, result);
        }
    
        public virtual int MasterCircularAdd(string masterCircularName, Nullable<int> createdBy, ObjectParameter result)
        {
            var masterCircularNameParameter = masterCircularName != null ?
                new ObjectParameter("MasterCircularName", masterCircularName) :
                new ObjectParameter("MasterCircularName", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MasterCircularAdd", masterCircularNameParameter, createdByParameter, result);
        }
    
        public virtual int MasterCircularDelete(Nullable<int> masterCircularId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var masterCircularIdParameter = masterCircularId.HasValue ?
                new ObjectParameter("MasterCircularId", masterCircularId) :
                new ObjectParameter("MasterCircularId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MasterCircularDelete", masterCircularIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<MasterCircularGet_Result> MasterCircularGet(Nullable<int> masterCircularId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var masterCircularIdParameter = masterCircularId.HasValue ?
                new ObjectParameter("MasterCircularId", masterCircularId) :
                new ObjectParameter("MasterCircularId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MasterCircularGet_Result>("MasterCircularGet", masterCircularIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int MasterCircularUpdate(Nullable<int> masterCircularId, string masterCircularName, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var masterCircularIdParameter = masterCircularId.HasValue ?
                new ObjectParameter("MasterCircularId", masterCircularId) :
                new ObjectParameter("MasterCircularId", typeof(int));
    
            var masterCircularNameParameter = masterCircularName != null ?
                new ObjectParameter("MasterCircularName", masterCircularName) :
                new ObjectParameter("MasterCircularName", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MasterCircularUpdate", masterCircularIdParameter, masterCircularNameParameter, modifiedByParameter, result);
        }
    
        public virtual int SectorDetailAdd(Nullable<int> sectorId, Nullable<int> subSectorId, Nullable<int> year, string pressNoteId, string notificationId, string aPDIRCircularId, Nullable<int> createdBy, ObjectParameter result)
        {
            var sectorIdParameter = sectorId.HasValue ?
                new ObjectParameter("SectorId", sectorId) :
                new ObjectParameter("SectorId", typeof(int));
    
            var subSectorIdParameter = subSectorId.HasValue ?
                new ObjectParameter("SubSectorId", subSectorId) :
                new ObjectParameter("SubSectorId", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var pressNoteIdParameter = pressNoteId != null ?
                new ObjectParameter("PressNoteId", pressNoteId) :
                new ObjectParameter("PressNoteId", typeof(string));
    
            var notificationIdParameter = notificationId != null ?
                new ObjectParameter("NotificationId", notificationId) :
                new ObjectParameter("NotificationId", typeof(string));
    
            var aPDIRCircularIdParameter = aPDIRCircularId != null ?
                new ObjectParameter("APDIRCircularId", aPDIRCircularId) :
                new ObjectParameter("APDIRCircularId", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SectorDetailAdd", sectorIdParameter, subSectorIdParameter, yearParameter, pressNoteIdParameter, notificationIdParameter, aPDIRCircularIdParameter, createdByParameter, result);
        }
    
        public virtual int SectorDetailDelete(Nullable<int> sectorDetailId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var sectorDetailIdParameter = sectorDetailId.HasValue ?
                new ObjectParameter("SectorDetailId", sectorDetailId) :
                new ObjectParameter("SectorDetailId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SectorDetailDelete", sectorDetailIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<SectorDetailGet_Result> SectorDetailGet(Nullable<int> sectorDetailId, Nullable<int> sectorId, Nullable<int> subSectorId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var sectorDetailIdParameter = sectorDetailId.HasValue ?
                new ObjectParameter("SectorDetailId", sectorDetailId) :
                new ObjectParameter("SectorDetailId", typeof(int));
    
            var sectorIdParameter = sectorId.HasValue ?
                new ObjectParameter("SectorId", sectorId) :
                new ObjectParameter("SectorId", typeof(int));
    
            var subSectorIdParameter = subSectorId.HasValue ?
                new ObjectParameter("SubSectorId", subSectorId) :
                new ObjectParameter("SubSectorId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SectorDetailGet_Result>("SectorDetailGet", sectorDetailIdParameter, sectorIdParameter, subSectorIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int SectorDetailUpdate(Nullable<int> sectorDetailId, Nullable<int> sectorId, Nullable<int> subSectorId, Nullable<int> year, string pressNoteId, string notificationId, string aPDIRCircularId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var sectorDetailIdParameter = sectorDetailId.HasValue ?
                new ObjectParameter("SectorDetailId", sectorDetailId) :
                new ObjectParameter("SectorDetailId", typeof(int));
    
            var sectorIdParameter = sectorId.HasValue ?
                new ObjectParameter("SectorId", sectorId) :
                new ObjectParameter("SectorId", typeof(int));
    
            var subSectorIdParameter = subSectorId.HasValue ?
                new ObjectParameter("SubSectorId", subSectorId) :
                new ObjectParameter("SubSectorId", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var pressNoteIdParameter = pressNoteId != null ?
                new ObjectParameter("PressNoteId", pressNoteId) :
                new ObjectParameter("PressNoteId", typeof(string));
    
            var notificationIdParameter = notificationId != null ?
                new ObjectParameter("NotificationId", notificationId) :
                new ObjectParameter("NotificationId", typeof(string));
    
            var aPDIRCircularIdParameter = aPDIRCircularId != null ?
                new ObjectParameter("APDIRCircularId", aPDIRCircularId) :
                new ObjectParameter("APDIRCircularId", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SectorDetailUpdate", sectorDetailIdParameter, sectorIdParameter, subSectorIdParameter, yearParameter, pressNoteIdParameter, notificationIdParameter, aPDIRCircularIdParameter, modifiedByParameter, result);
        }
    
        public virtual int FAQCategoryAdd(string categoryName, Nullable<int> createdBy, ObjectParameter result)
        {
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FAQCategoryAdd", categoryNameParameter, createdByParameter, result);
        }
    
        public virtual int FAQCategoryDelete(Nullable<int> fAQCategoryId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var fAQCategoryIdParameter = fAQCategoryId.HasValue ?
                new ObjectParameter("FAQCategoryId", fAQCategoryId) :
                new ObjectParameter("FAQCategoryId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FAQCategoryDelete", fAQCategoryIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<FAQCategoryGet_Result> FAQCategoryGet(Nullable<int> fAQCategoryId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var fAQCategoryIdParameter = fAQCategoryId.HasValue ?
                new ObjectParameter("FAQCategoryId", fAQCategoryId) :
                new ObjectParameter("FAQCategoryId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FAQCategoryGet_Result>("FAQCategoryGet", fAQCategoryIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int FAQCategoryUpdate(Nullable<int> fAQCategoryId, string categoryName, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var fAQCategoryIdParameter = fAQCategoryId.HasValue ?
                new ObjectParameter("FAQCategoryId", fAQCategoryId) :
                new ObjectParameter("FAQCategoryId", typeof(int));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FAQCategoryUpdate", fAQCategoryIdParameter, categoryNameParameter, modifiedByParameter, result);
        }
    
        public virtual int MasterDirectionAdd(string masterDirectionName, string pDF, string year, Nullable<int> createdBy, ObjectParameter result)
        {
            var masterDirectionNameParameter = masterDirectionName != null ?
                new ObjectParameter("MasterDirectionName", masterDirectionName) :
                new ObjectParameter("MasterDirectionName", typeof(string));
    
            var pDFParameter = pDF != null ?
                new ObjectParameter("PDF", pDF) :
                new ObjectParameter("PDF", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MasterDirectionAdd", masterDirectionNameParameter, pDFParameter, yearParameter, createdByParameter, result);
        }
    
        public virtual int MasterDirectionDelete(Nullable<int> masterDirectionId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var masterDirectionIdParameter = masterDirectionId.HasValue ?
                new ObjectParameter("MasterDirectionId", masterDirectionId) :
                new ObjectParameter("MasterDirectionId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MasterDirectionDelete", masterDirectionIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<MasterDirectionGet_Result> MasterDirectionGet(Nullable<int> masterDirectionId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var masterDirectionIdParameter = masterDirectionId.HasValue ?
                new ObjectParameter("MasterDirectionId", masterDirectionId) :
                new ObjectParameter("MasterDirectionId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MasterDirectionGet_Result>("MasterDirectionGet", masterDirectionIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int MasterDirectionUpdate(Nullable<int> masterDirectionId, string masterDirectionName, string year, string pDF, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var masterDirectionIdParameter = masterDirectionId.HasValue ?
                new ObjectParameter("MasterDirectionId", masterDirectionId) :
                new ObjectParameter("MasterDirectionId", typeof(int));
    
            var masterDirectionNameParameter = masterDirectionName != null ?
                new ObjectParameter("MasterDirectionName", masterDirectionName) :
                new ObjectParameter("MasterDirectionName", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var pDFParameter = pDF != null ?
                new ObjectParameter("PDF", pDF) :
                new ObjectParameter("PDF", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MasterDirectionUpdate", masterDirectionIdParameter, masterDirectionNameParameter, yearParameter, pDFParameter, modifiedByParameter, result);
        }
    
        public virtual int MasterDirectionFAQAdd(Nullable<int> masterDirectionId, Nullable<int> fAQId, Nullable<int> createdBy, ObjectParameter result)
        {
            var masterDirectionIdParameter = masterDirectionId.HasValue ?
                new ObjectParameter("MasterDirectionId", masterDirectionId) :
                new ObjectParameter("MasterDirectionId", typeof(int));
    
            var fAQIdParameter = fAQId.HasValue ?
                new ObjectParameter("FAQId", fAQId) :
                new ObjectParameter("FAQId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MasterDirectionFAQAdd", masterDirectionIdParameter, fAQIdParameter, createdByParameter, result);
        }
    
        public virtual int MasterDirectionFAQDelete(Nullable<int> masterDirectionFAQId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var masterDirectionFAQIdParameter = masterDirectionFAQId.HasValue ?
                new ObjectParameter("MasterDirectionFAQId", masterDirectionFAQId) :
                new ObjectParameter("MasterDirectionFAQId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MasterDirectionFAQDelete", masterDirectionFAQIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<MasterDirectionFAQGet_Result> MasterDirectionFAQGet(Nullable<int> masterDirectionFAQId, Nullable<int> masterDirectionId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var masterDirectionFAQIdParameter = masterDirectionFAQId.HasValue ?
                new ObjectParameter("MasterDirectionFAQId", masterDirectionFAQId) :
                new ObjectParameter("MasterDirectionFAQId", typeof(int));
    
            var masterDirectionIdParameter = masterDirectionId.HasValue ?
                new ObjectParameter("MasterDirectionId", masterDirectionId) :
                new ObjectParameter("MasterDirectionId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MasterDirectionFAQGet_Result>("MasterDirectionFAQGet", masterDirectionFAQIdParameter, masterDirectionIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int MasterDirectionFAQUpdate(Nullable<int> masterDirectionFAQId, Nullable<int> masterDirectionId, Nullable<int> fAQId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var masterDirectionFAQIdParameter = masterDirectionFAQId.HasValue ?
                new ObjectParameter("MasterDirectionFAQId", masterDirectionFAQId) :
                new ObjectParameter("MasterDirectionFAQId", typeof(int));
    
            var masterDirectionIdParameter = masterDirectionId.HasValue ?
                new ObjectParameter("MasterDirectionId", masterDirectionId) :
                new ObjectParameter("MasterDirectionId", typeof(int));
    
            var fAQIdParameter = fAQId.HasValue ?
                new ObjectParameter("FAQId", fAQId) :
                new ObjectParameter("FAQId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MasterDirectionFAQUpdate", masterDirectionFAQIdParameter, masterDirectionIdParameter, fAQIdParameter, modifiedByParameter, result);
        }
    
        public virtual int MasterDirectionChapterAdd(Nullable<int> masterDirectionId, string chapter, Nullable<int> saveAfterChapterId, Nullable<int> createdBy, ObjectParameter result)
        {
            var masterDirectionIdParameter = masterDirectionId.HasValue ?
                new ObjectParameter("MasterDirectionId", masterDirectionId) :
                new ObjectParameter("MasterDirectionId", typeof(int));
    
            var chapterParameter = chapter != null ?
                new ObjectParameter("Chapter", chapter) :
                new ObjectParameter("Chapter", typeof(string));
    
            var saveAfterChapterIdParameter = saveAfterChapterId.HasValue ?
                new ObjectParameter("SaveAfterChapterId", saveAfterChapterId) :
                new ObjectParameter("SaveAfterChapterId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MasterDirectionChapterAdd", masterDirectionIdParameter, chapterParameter, saveAfterChapterIdParameter, createdByParameter, result);
        }
    
        public virtual int MasterDirectionChapterDelete(Nullable<int> masterDirectionChapterId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var masterDirectionChapterIdParameter = masterDirectionChapterId.HasValue ?
                new ObjectParameter("MasterDirectionChapterId", masterDirectionChapterId) :
                new ObjectParameter("MasterDirectionChapterId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MasterDirectionChapterDelete", masterDirectionChapterIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<MasterDirectionChapterGet_Result> MasterDirectionChapterGet(Nullable<int> masterDirectionChapterId, Nullable<int> masterDirectionId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var masterDirectionChapterIdParameter = masterDirectionChapterId.HasValue ?
                new ObjectParameter("MasterDirectionChapterId", masterDirectionChapterId) :
                new ObjectParameter("MasterDirectionChapterId", typeof(int));
    
            var masterDirectionIdParameter = masterDirectionId.HasValue ?
                new ObjectParameter("MasterDirectionId", masterDirectionId) :
                new ObjectParameter("MasterDirectionId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MasterDirectionChapterGet_Result>("MasterDirectionChapterGet", masterDirectionChapterIdParameter, masterDirectionIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int MasterDirectionChapterUpdate(Nullable<int> masterDirectionChapterId, Nullable<int> masterDirectionId, string chapter, Nullable<int> saveAfterChapterId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var masterDirectionChapterIdParameter = masterDirectionChapterId.HasValue ?
                new ObjectParameter("MasterDirectionChapterId", masterDirectionChapterId) :
                new ObjectParameter("MasterDirectionChapterId", typeof(int));
    
            var masterDirectionIdParameter = masterDirectionId.HasValue ?
                new ObjectParameter("MasterDirectionId", masterDirectionId) :
                new ObjectParameter("MasterDirectionId", typeof(int));
    
            var chapterParameter = chapter != null ?
                new ObjectParameter("Chapter", chapter) :
                new ObjectParameter("Chapter", typeof(string));
    
            var saveAfterChapterIdParameter = saveAfterChapterId.HasValue ?
                new ObjectParameter("SaveAfterChapterId", saveAfterChapterId) :
                new ObjectParameter("SaveAfterChapterId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MasterDirectionChapterUpdate", masterDirectionChapterIdParameter, masterDirectionIdParameter, chapterParameter, saveAfterChapterIdParameter, modifiedByParameter, result);
        }
    
        public virtual int MasterDirectionIndexAdd(Nullable<int> masterDirectionChapterId, string indexNo, string indexName, string indexContent, Nullable<int> saveAfterIndexId, Nullable<int> createdBy, ObjectParameter result)
        {
            var masterDirectionChapterIdParameter = masterDirectionChapterId.HasValue ?
                new ObjectParameter("MasterDirectionChapterId", masterDirectionChapterId) :
                new ObjectParameter("MasterDirectionChapterId", typeof(int));
    
            var indexNoParameter = indexNo != null ?
                new ObjectParameter("IndexNo", indexNo) :
                new ObjectParameter("IndexNo", typeof(string));
    
            var indexNameParameter = indexName != null ?
                new ObjectParameter("IndexName", indexName) :
                new ObjectParameter("IndexName", typeof(string));
    
            var indexContentParameter = indexContent != null ?
                new ObjectParameter("IndexContent", indexContent) :
                new ObjectParameter("IndexContent", typeof(string));
    
            var saveAfterIndexIdParameter = saveAfterIndexId.HasValue ?
                new ObjectParameter("SaveAfterIndexId", saveAfterIndexId) :
                new ObjectParameter("SaveAfterIndexId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MasterDirectionIndexAdd", masterDirectionChapterIdParameter, indexNoParameter, indexNameParameter, indexContentParameter, saveAfterIndexIdParameter, createdByParameter, result);
        }
    
        public virtual int MasterDirectionIndexDelete(Nullable<int> masterDirectionIndexId, Nullable<int> masterDirectionChapterId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var masterDirectionIndexIdParameter = masterDirectionIndexId.HasValue ?
                new ObjectParameter("MasterDirectionIndexId", masterDirectionIndexId) :
                new ObjectParameter("MasterDirectionIndexId", typeof(int));
    
            var masterDirectionChapterIdParameter = masterDirectionChapterId.HasValue ?
                new ObjectParameter("MasterDirectionChapterId", masterDirectionChapterId) :
                new ObjectParameter("MasterDirectionChapterId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MasterDirectionIndexDelete", masterDirectionIndexIdParameter, masterDirectionChapterIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<MasterDirectionIndexGet_Result> MasterDirectionIndexGet(Nullable<int> masterDirectionIndexId, Nullable<int> masterDirectionId, Nullable<int> masterDirectionChapterId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var masterDirectionIndexIdParameter = masterDirectionIndexId.HasValue ?
                new ObjectParameter("MasterDirectionIndexId", masterDirectionIndexId) :
                new ObjectParameter("MasterDirectionIndexId", typeof(int));
    
            var masterDirectionIdParameter = masterDirectionId.HasValue ?
                new ObjectParameter("MasterDirectionId", masterDirectionId) :
                new ObjectParameter("MasterDirectionId", typeof(int));
    
            var masterDirectionChapterIdParameter = masterDirectionChapterId.HasValue ?
                new ObjectParameter("MasterDirectionChapterId", masterDirectionChapterId) :
                new ObjectParameter("MasterDirectionChapterId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MasterDirectionIndexGet_Result>("MasterDirectionIndexGet", masterDirectionIndexIdParameter, masterDirectionIdParameter, masterDirectionChapterIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int MasterDirectionIndexUpdate(Nullable<int> masterDirectionIndexId, Nullable<int> masterDirectionChapterId, string indexNo, string indexname, string indexContent, Nullable<int> saveAfterIndexId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var masterDirectionIndexIdParameter = masterDirectionIndexId.HasValue ?
                new ObjectParameter("MasterDirectionIndexId", masterDirectionIndexId) :
                new ObjectParameter("MasterDirectionIndexId", typeof(int));
    
            var masterDirectionChapterIdParameter = masterDirectionChapterId.HasValue ?
                new ObjectParameter("MasterDirectionChapterId", masterDirectionChapterId) :
                new ObjectParameter("MasterDirectionChapterId", typeof(int));
    
            var indexNoParameter = indexNo != null ?
                new ObjectParameter("IndexNo", indexNo) :
                new ObjectParameter("IndexNo", typeof(string));
    
            var indexnameParameter = indexname != null ?
                new ObjectParameter("Indexname", indexname) :
                new ObjectParameter("Indexname", typeof(string));
    
            var indexContentParameter = indexContent != null ?
                new ObjectParameter("IndexContent", indexContent) :
                new ObjectParameter("IndexContent", typeof(string));
    
            var saveAfterIndexIdParameter = saveAfterIndexId.HasValue ?
                new ObjectParameter("SaveAfterIndexId", saveAfterIndexId) :
                new ObjectParameter("SaveAfterIndexId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MasterDirectionIndexUpdate", masterDirectionIndexIdParameter, masterDirectionChapterIdParameter, indexNoParameter, indexnameParameter, indexContentParameter, saveAfterIndexIdParameter, modifiedByParameter, result);
        }
    
        public virtual int MasterDirectionSubIndexAdd(Nullable<int> masterDirectionIndexId, string subIndexNo, string subIndexName, string subIndexContent, Nullable<int> saveAfterSubIndexId, Nullable<int> createdBy, ObjectParameter result)
        {
            var masterDirectionIndexIdParameter = masterDirectionIndexId.HasValue ?
                new ObjectParameter("MasterDirectionIndexId", masterDirectionIndexId) :
                new ObjectParameter("MasterDirectionIndexId", typeof(int));
    
            var subIndexNoParameter = subIndexNo != null ?
                new ObjectParameter("SubIndexNo", subIndexNo) :
                new ObjectParameter("SubIndexNo", typeof(string));
    
            var subIndexNameParameter = subIndexName != null ?
                new ObjectParameter("SubIndexName", subIndexName) :
                new ObjectParameter("SubIndexName", typeof(string));
    
            var subIndexContentParameter = subIndexContent != null ?
                new ObjectParameter("SubIndexContent", subIndexContent) :
                new ObjectParameter("SubIndexContent", typeof(string));
    
            var saveAfterSubIndexIdParameter = saveAfterSubIndexId.HasValue ?
                new ObjectParameter("SaveAfterSubIndexId", saveAfterSubIndexId) :
                new ObjectParameter("SaveAfterSubIndexId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MasterDirectionSubIndexAdd", masterDirectionIndexIdParameter, subIndexNoParameter, subIndexNameParameter, subIndexContentParameter, saveAfterSubIndexIdParameter, createdByParameter, result);
        }
    
        public virtual int MasterDirectionSubIndexDelete(Nullable<int> masterDirectionSubIndexId, Nullable<int> masterDirectionIndexId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var masterDirectionSubIndexIdParameter = masterDirectionSubIndexId.HasValue ?
                new ObjectParameter("MasterDirectionSubIndexId", masterDirectionSubIndexId) :
                new ObjectParameter("MasterDirectionSubIndexId", typeof(int));
    
            var masterDirectionIndexIdParameter = masterDirectionIndexId.HasValue ?
                new ObjectParameter("MasterDirectionIndexId", masterDirectionIndexId) :
                new ObjectParameter("MasterDirectionIndexId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MasterDirectionSubIndexDelete", masterDirectionSubIndexIdParameter, masterDirectionIndexIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<MasterDirectionSubIndexGet_Result> MasterDirectionSubIndexGet(Nullable<int> masterDirectionSubIndexId, Nullable<int> masterDirectionId, Nullable<int> masterDirectionIndexId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var masterDirectionSubIndexIdParameter = masterDirectionSubIndexId.HasValue ?
                new ObjectParameter("MasterDirectionSubIndexId", masterDirectionSubIndexId) :
                new ObjectParameter("MasterDirectionSubIndexId", typeof(int));
    
            var masterDirectionIdParameter = masterDirectionId.HasValue ?
                new ObjectParameter("MasterDirectionId", masterDirectionId) :
                new ObjectParameter("MasterDirectionId", typeof(int));
    
            var masterDirectionIndexIdParameter = masterDirectionIndexId.HasValue ?
                new ObjectParameter("MasterDirectionIndexId", masterDirectionIndexId) :
                new ObjectParameter("MasterDirectionIndexId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MasterDirectionSubIndexGet_Result>("MasterDirectionSubIndexGet", masterDirectionSubIndexIdParameter, masterDirectionIdParameter, masterDirectionIndexIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int MasterDirectionSubIndexUpdate(Nullable<int> masterDirectionSubIndexId, Nullable<int> masterDirectionIndexId, string subIndexNo, string subIndexName, string subIndexContent, Nullable<int> saveAfterSubIndexId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var masterDirectionSubIndexIdParameter = masterDirectionSubIndexId.HasValue ?
                new ObjectParameter("MasterDirectionSubIndexId", masterDirectionSubIndexId) :
                new ObjectParameter("MasterDirectionSubIndexId", typeof(int));
    
            var masterDirectionIndexIdParameter = masterDirectionIndexId.HasValue ?
                new ObjectParameter("MasterDirectionIndexId", masterDirectionIndexId) :
                new ObjectParameter("MasterDirectionIndexId", typeof(int));
    
            var subIndexNoParameter = subIndexNo != null ?
                new ObjectParameter("SubIndexNo", subIndexNo) :
                new ObjectParameter("SubIndexNo", typeof(string));
    
            var subIndexNameParameter = subIndexName != null ?
                new ObjectParameter("SubIndexName", subIndexName) :
                new ObjectParameter("SubIndexName", typeof(string));
    
            var subIndexContentParameter = subIndexContent != null ?
                new ObjectParameter("SubIndexContent", subIndexContent) :
                new ObjectParameter("SubIndexContent", typeof(string));
    
            var saveAfterSubIndexIdParameter = saveAfterSubIndexId.HasValue ?
                new ObjectParameter("SaveAfterSubIndexId", saveAfterSubIndexId) :
                new ObjectParameter("SaveAfterSubIndexId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MasterDirectionSubIndexUpdate", masterDirectionSubIndexIdParameter, masterDirectionIndexIdParameter, subIndexNoParameter, subIndexNameParameter, subIndexContentParameter, saveAfterSubIndexIdParameter, modifiedByParameter, result);
        }
    
        public virtual int MDIndexAmendmentAdd(Nullable<int> masterDirectionId, string aPDIRCircularIds, string notificationIds, Nullable<int> masterDirectionChapterId, Nullable<int> indexId, Nullable<int> subIndexId, string indexAmendmentContent, string year, Nullable<bool> updatedInsertedByRBI, Nullable<System.DateTime> updatedInsertedDateByRBI, Nullable<int> createdBy, ObjectParameter result)
        {
            var masterDirectionIdParameter = masterDirectionId.HasValue ?
                new ObjectParameter("MasterDirectionId", masterDirectionId) :
                new ObjectParameter("MasterDirectionId", typeof(int));
    
            var aPDIRCircularIdsParameter = aPDIRCircularIds != null ?
                new ObjectParameter("APDIRCircularIds", aPDIRCircularIds) :
                new ObjectParameter("APDIRCircularIds", typeof(string));
    
            var notificationIdsParameter = notificationIds != null ?
                new ObjectParameter("NotificationIds", notificationIds) :
                new ObjectParameter("NotificationIds", typeof(string));
    
            var masterDirectionChapterIdParameter = masterDirectionChapterId.HasValue ?
                new ObjectParameter("MasterDirectionChapterId", masterDirectionChapterId) :
                new ObjectParameter("MasterDirectionChapterId", typeof(int));
    
            var indexIdParameter = indexId.HasValue ?
                new ObjectParameter("IndexId", indexId) :
                new ObjectParameter("IndexId", typeof(int));
    
            var subIndexIdParameter = subIndexId.HasValue ?
                new ObjectParameter("SubIndexId", subIndexId) :
                new ObjectParameter("SubIndexId", typeof(int));
    
            var indexAmendmentContentParameter = indexAmendmentContent != null ?
                new ObjectParameter("IndexAmendmentContent", indexAmendmentContent) :
                new ObjectParameter("IndexAmendmentContent", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var updatedInsertedByRBIParameter = updatedInsertedByRBI.HasValue ?
                new ObjectParameter("UpdatedInsertedByRBI", updatedInsertedByRBI) :
                new ObjectParameter("UpdatedInsertedByRBI", typeof(bool));
    
            var updatedInsertedDateByRBIParameter = updatedInsertedDateByRBI.HasValue ?
                new ObjectParameter("UpdatedInsertedDateByRBI", updatedInsertedDateByRBI) :
                new ObjectParameter("UpdatedInsertedDateByRBI", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MDIndexAmendmentAdd", masterDirectionIdParameter, aPDIRCircularIdsParameter, notificationIdsParameter, masterDirectionChapterIdParameter, indexIdParameter, subIndexIdParameter, indexAmendmentContentParameter, yearParameter, updatedInsertedByRBIParameter, updatedInsertedDateByRBIParameter, createdByParameter, result);
        }
    
        public virtual int MDIndexAmendmentDelete(Nullable<int> masterDirectionIndexAmendmentId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var masterDirectionIndexAmendmentIdParameter = masterDirectionIndexAmendmentId.HasValue ?
                new ObjectParameter("MasterDirectionIndexAmendmentId", masterDirectionIndexAmendmentId) :
                new ObjectParameter("MasterDirectionIndexAmendmentId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MDIndexAmendmentDelete", masterDirectionIndexAmendmentIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<MDIndexAmendmentGet_Result> MDIndexAmendmentGet(Nullable<int> masterDirectionIndexAmendmentId, Nullable<int> masterDirectionId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var masterDirectionIndexAmendmentIdParameter = masterDirectionIndexAmendmentId.HasValue ?
                new ObjectParameter("MasterDirectionIndexAmendmentId", masterDirectionIndexAmendmentId) :
                new ObjectParameter("MasterDirectionIndexAmendmentId", typeof(int));
    
            var masterDirectionIdParameter = masterDirectionId.HasValue ?
                new ObjectParameter("MasterDirectionId", masterDirectionId) :
                new ObjectParameter("MasterDirectionId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MDIndexAmendmentGet_Result>("MDIndexAmendmentGet", masterDirectionIndexAmendmentIdParameter, masterDirectionIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int MDIndexAmendmentUpdate(Nullable<int> masterDirectionIndexAmendmentId, Nullable<int> masterDirectionId, string aPDIRCircularIds, string notificationIds, Nullable<int> masterDirectionChapterId, Nullable<int> masterDirectionIndexId, Nullable<int> masterDirectionSubIndexId, string indexAmendmentContent, string year, Nullable<bool> updatedInsertedByRBI, Nullable<System.DateTime> updatedInsertedDateByRBI, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var masterDirectionIndexAmendmentIdParameter = masterDirectionIndexAmendmentId.HasValue ?
                new ObjectParameter("MasterDirectionIndexAmendmentId", masterDirectionIndexAmendmentId) :
                new ObjectParameter("MasterDirectionIndexAmendmentId", typeof(int));
    
            var masterDirectionIdParameter = masterDirectionId.HasValue ?
                new ObjectParameter("MasterDirectionId", masterDirectionId) :
                new ObjectParameter("MasterDirectionId", typeof(int));
    
            var aPDIRCircularIdsParameter = aPDIRCircularIds != null ?
                new ObjectParameter("APDIRCircularIds", aPDIRCircularIds) :
                new ObjectParameter("APDIRCircularIds", typeof(string));
    
            var notificationIdsParameter = notificationIds != null ?
                new ObjectParameter("NotificationIds", notificationIds) :
                new ObjectParameter("NotificationIds", typeof(string));
    
            var masterDirectionChapterIdParameter = masterDirectionChapterId.HasValue ?
                new ObjectParameter("MasterDirectionChapterId", masterDirectionChapterId) :
                new ObjectParameter("MasterDirectionChapterId", typeof(int));
    
            var masterDirectionIndexIdParameter = masterDirectionIndexId.HasValue ?
                new ObjectParameter("MasterDirectionIndexId", masterDirectionIndexId) :
                new ObjectParameter("MasterDirectionIndexId", typeof(int));
    
            var masterDirectionSubIndexIdParameter = masterDirectionSubIndexId.HasValue ?
                new ObjectParameter("MasterDirectionSubIndexId", masterDirectionSubIndexId) :
                new ObjectParameter("MasterDirectionSubIndexId", typeof(int));
    
            var indexAmendmentContentParameter = indexAmendmentContent != null ?
                new ObjectParameter("IndexAmendmentContent", indexAmendmentContent) :
                new ObjectParameter("IndexAmendmentContent", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var updatedInsertedByRBIParameter = updatedInsertedByRBI.HasValue ?
                new ObjectParameter("UpdatedInsertedByRBI", updatedInsertedByRBI) :
                new ObjectParameter("UpdatedInsertedByRBI", typeof(bool));
    
            var updatedInsertedDateByRBIParameter = updatedInsertedDateByRBI.HasValue ?
                new ObjectParameter("UpdatedInsertedDateByRBI", updatedInsertedDateByRBI) :
                new ObjectParameter("UpdatedInsertedDateByRBI", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MDIndexAmendmentUpdate", masterDirectionIndexAmendmentIdParameter, masterDirectionIdParameter, aPDIRCircularIdsParameter, notificationIdsParameter, masterDirectionChapterIdParameter, masterDirectionIndexIdParameter, masterDirectionSubIndexIdParameter, indexAmendmentContentParameter, yearParameter, updatedInsertedByRBIParameter, updatedInsertedDateByRBIParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<MasterCircualrDetailGet_Result> MasterCircualrDetailGet(Nullable<int> masterCircualrDetailId, Nullable<int> masterCircualrId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var masterCircualrDetailIdParameter = masterCircualrDetailId.HasValue ?
                new ObjectParameter("MasterCircualrDetailId", masterCircualrDetailId) :
                new ObjectParameter("MasterCircualrDetailId", typeof(int));
    
            var masterCircualrIdParameter = masterCircualrId.HasValue ?
                new ObjectParameter("MasterCircualrId", masterCircualrId) :
                new ObjectParameter("MasterCircualrId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MasterCircualrDetailGet_Result>("MasterCircualrDetailGet", masterCircualrDetailIdParameter, masterCircualrIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int MasterCircularDetailAdd(Nullable<int> masterCircularId, string year, string pDF, Nullable<int> createdBy, ObjectParameter result)
        {
            var masterCircularIdParameter = masterCircularId.HasValue ?
                new ObjectParameter("MasterCircularId", masterCircularId) :
                new ObjectParameter("MasterCircularId", typeof(int));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var pDFParameter = pDF != null ?
                new ObjectParameter("PDF", pDF) :
                new ObjectParameter("PDF", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MasterCircularDetailAdd", masterCircularIdParameter, yearParameter, pDFParameter, createdByParameter, result);
        }
    
        public virtual int MasterCircularDetailDelete(Nullable<int> masterCircularDetailId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var masterCircularDetailIdParameter = masterCircularDetailId.HasValue ?
                new ObjectParameter("MasterCircularDetailId", masterCircularDetailId) :
                new ObjectParameter("MasterCircularDetailId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MasterCircularDetailDelete", masterCircularDetailIdParameter, modifiedByParameter, result);
        }
    
        public virtual int MasterCircularDetailUpdate(Nullable<int> masterCircularDetailId, Nullable<int> masterCircularId, string year, string pDF, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var masterCircularDetailIdParameter = masterCircularDetailId.HasValue ?
                new ObjectParameter("MasterCircularDetailId", masterCircularDetailId) :
                new ObjectParameter("MasterCircularDetailId", typeof(int));
    
            var masterCircularIdParameter = masterCircularId.HasValue ?
                new ObjectParameter("MasterCircularId", masterCircularId) :
                new ObjectParameter("MasterCircularId", typeof(int));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var pDFParameter = pDF != null ?
                new ObjectParameter("PDF", pDF) :
                new ObjectParameter("PDF", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MasterCircularDetailUpdate", masterCircularDetailIdParameter, masterCircularIdParameter, yearParameter, pDFParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<MasterCircularDetailGet_Result> MasterCircularDetailGet(Nullable<int> masterCircularDetailId, Nullable<int> masterCircularId, string year, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var masterCircularDetailIdParameter = masterCircularDetailId.HasValue ?
                new ObjectParameter("MasterCircularDetailId", masterCircularDetailId) :
                new ObjectParameter("MasterCircularDetailId", typeof(int));
    
            var masterCircularIdParameter = masterCircularId.HasValue ?
                new ObjectParameter("MasterCircularId", masterCircularId) :
                new ObjectParameter("MasterCircularId", typeof(int));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MasterCircularDetailGet_Result>("MasterCircularDetailGet", masterCircularDetailIdParameter, masterCircularIdParameter, yearParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int NICCodeAdd(string nICCodeName, string pDF, Nullable<int> createdBy, ObjectParameter result)
        {
            var nICCodeNameParameter = nICCodeName != null ?
                new ObjectParameter("NICCodeName", nICCodeName) :
                new ObjectParameter("NICCodeName", typeof(string));
    
            var pDFParameter = pDF != null ?
                new ObjectParameter("PDF", pDF) :
                new ObjectParameter("PDF", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NICCodeAdd", nICCodeNameParameter, pDFParameter, createdByParameter, result);
        }
    
        public virtual int NICCodeDelete(Nullable<int> nICCodeId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var nICCodeIdParameter = nICCodeId.HasValue ?
                new ObjectParameter("NICCodeId", nICCodeId) :
                new ObjectParameter("NICCodeId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NICCodeDelete", nICCodeIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<NICCodeGet_Result> NICCodeGet(Nullable<int> nICCodeId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var nICCodeIdParameter = nICCodeId.HasValue ?
                new ObjectParameter("NICCodeId", nICCodeId) :
                new ObjectParameter("NICCodeId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NICCodeGet_Result>("NICCodeGet", nICCodeIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int NICCodeUpdate(Nullable<int> nICCodeId, string nICCodeName, string pDF, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var nICCodeIdParameter = nICCodeId.HasValue ?
                new ObjectParameter("NICCodeId", nICCodeId) :
                new ObjectParameter("NICCodeId", typeof(int));
    
            var nICCodeNameParameter = nICCodeName != null ?
                new ObjectParameter("NICCodeName", nICCodeName) :
                new ObjectParameter("NICCodeName", typeof(string));
    
            var pDFParameter = pDF != null ?
                new ObjectParameter("PDF", pDF) :
                new ObjectParameter("PDF", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NICCodeUpdate", nICCodeIdParameter, nICCodeNameParameter, pDFParameter, modifiedByParameter, result);
        }
    
        public virtual int ManualAdd(string manualName, string pDF, Nullable<int> createdBy, ObjectParameter result)
        {
            var manualNameParameter = manualName != null ?
                new ObjectParameter("ManualName", manualName) :
                new ObjectParameter("ManualName", typeof(string));
    
            var pDFParameter = pDF != null ?
                new ObjectParameter("PDF", pDF) :
                new ObjectParameter("PDF", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ManualAdd", manualNameParameter, pDFParameter, createdByParameter, result);
        }
    
        public virtual int ManualDelete(Nullable<int> manualId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var manualIdParameter = manualId.HasValue ?
                new ObjectParameter("ManualId", manualId) :
                new ObjectParameter("ManualId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ManualDelete", manualIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<ManualGet_Result> ManualGet(Nullable<int> manualId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var manualIdParameter = manualId.HasValue ?
                new ObjectParameter("ManualId", manualId) :
                new ObjectParameter("ManualId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ManualGet_Result>("ManualGet", manualIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int ManualUpdate(Nullable<int> manualId, string manualName, string pDF, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var manualIdParameter = manualId.HasValue ?
                new ObjectParameter("ManualId", manualId) :
                new ObjectParameter("ManualId", typeof(int));
    
            var manualNameParameter = manualName != null ?
                new ObjectParameter("ManualName", manualName) :
                new ObjectParameter("ManualName", typeof(string));
    
            var pDFParameter = pDF != null ?
                new ObjectParameter("PDF", pDF) :
                new ObjectParameter("PDF", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ManualUpdate", manualIdParameter, manualNameParameter, pDFParameter, modifiedByParameter, result);
        }
    
        public virtual int FetersCodeAdd(string fetersCodeName, string pDF, Nullable<int> createdBy, ObjectParameter result)
        {
            var fetersCodeNameParameter = fetersCodeName != null ?
                new ObjectParameter("FetersCodeName", fetersCodeName) :
                new ObjectParameter("FetersCodeName", typeof(string));
    
            var pDFParameter = pDF != null ?
                new ObjectParameter("PDF", pDF) :
                new ObjectParameter("PDF", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FetersCodeAdd", fetersCodeNameParameter, pDFParameter, createdByParameter, result);
        }
    
        public virtual int FetersCodeDelete(Nullable<int> fetersCodeId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var fetersCodeIdParameter = fetersCodeId.HasValue ?
                new ObjectParameter("FetersCodeId", fetersCodeId) :
                new ObjectParameter("FetersCodeId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FetersCodeDelete", fetersCodeIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<FetersCodeGet_Result> FetersCodeGet(Nullable<int> fetersCodeId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var fetersCodeIdParameter = fetersCodeId.HasValue ?
                new ObjectParameter("FetersCodeId", fetersCodeId) :
                new ObjectParameter("FetersCodeId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetersCodeGet_Result>("FetersCodeGet", fetersCodeIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int FetersCodeUpdate(Nullable<int> fetersCodeId, string fetersCodeName, string pDF, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var fetersCodeIdParameter = fetersCodeId.HasValue ?
                new ObjectParameter("FetersCodeId", fetersCodeId) :
                new ObjectParameter("FetersCodeId", typeof(int));
    
            var fetersCodeNameParameter = fetersCodeName != null ?
                new ObjectParameter("FetersCodeName", fetersCodeName) :
                new ObjectParameter("FetersCodeName", typeof(string));
    
            var pDFParameter = pDF != null ?
                new ObjectParameter("PDF", pDF) :
                new ObjectParameter("PDF", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FetersCodeUpdate", fetersCodeIdParameter, fetersCodeNameParameter, pDFParameter, modifiedByParameter, result);
        }
    
        public virtual int FetersCodeDetailAdd(Nullable<int> fetersCodeId, string groupNo, string purposeGroupName, string lRSItem, string lRSFetersCode, Nullable<int> createdBy, ObjectParameter result)
        {
            var fetersCodeIdParameter = fetersCodeId.HasValue ?
                new ObjectParameter("FetersCodeId", fetersCodeId) :
                new ObjectParameter("FetersCodeId", typeof(int));
    
            var groupNoParameter = groupNo != null ?
                new ObjectParameter("GroupNo", groupNo) :
                new ObjectParameter("GroupNo", typeof(string));
    
            var purposeGroupNameParameter = purposeGroupName != null ?
                new ObjectParameter("PurposeGroupName", purposeGroupName) :
                new ObjectParameter("PurposeGroupName", typeof(string));
    
            var lRSItemParameter = lRSItem != null ?
                new ObjectParameter("LRSItem", lRSItem) :
                new ObjectParameter("LRSItem", typeof(string));
    
            var lRSFetersCodeParameter = lRSFetersCode != null ?
                new ObjectParameter("LRSFetersCode", lRSFetersCode) :
                new ObjectParameter("LRSFetersCode", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FetersCodeDetailAdd", fetersCodeIdParameter, groupNoParameter, purposeGroupNameParameter, lRSItemParameter, lRSFetersCodeParameter, createdByParameter, result);
        }
    
        public virtual int FetersCodeDetailDelete(Nullable<int> fetersCodeDetailId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var fetersCodeDetailIdParameter = fetersCodeDetailId.HasValue ?
                new ObjectParameter("FetersCodeDetailId", fetersCodeDetailId) :
                new ObjectParameter("FetersCodeDetailId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FetersCodeDetailDelete", fetersCodeDetailIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<FetersCodeDetailGet_Result> FetersCodeDetailGet(Nullable<int> fetersCodeDetailId, Nullable<int> fetersCodeId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var fetersCodeDetailIdParameter = fetersCodeDetailId.HasValue ?
                new ObjectParameter("FetersCodeDetailId", fetersCodeDetailId) :
                new ObjectParameter("FetersCodeDetailId", typeof(int));
    
            var fetersCodeIdParameter = fetersCodeId.HasValue ?
                new ObjectParameter("FetersCodeId", fetersCodeId) :
                new ObjectParameter("FetersCodeId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetersCodeDetailGet_Result>("FetersCodeDetailGet", fetersCodeDetailIdParameter, fetersCodeIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int FetersCodeDetailUpdate(Nullable<int> fetersCodeDetailId, Nullable<int> fetersCodeId, string groupNo, string purposeGroupName, string lRSItem, string lRSFetersCode, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var fetersCodeDetailIdParameter = fetersCodeDetailId.HasValue ?
                new ObjectParameter("FetersCodeDetailId", fetersCodeDetailId) :
                new ObjectParameter("FetersCodeDetailId", typeof(int));
    
            var fetersCodeIdParameter = fetersCodeId.HasValue ?
                new ObjectParameter("FetersCodeId", fetersCodeId) :
                new ObjectParameter("FetersCodeId", typeof(int));
    
            var groupNoParameter = groupNo != null ?
                new ObjectParameter("GroupNo", groupNo) :
                new ObjectParameter("GroupNo", typeof(string));
    
            var purposeGroupNameParameter = purposeGroupName != null ?
                new ObjectParameter("PurposeGroupName", purposeGroupName) :
                new ObjectParameter("PurposeGroupName", typeof(string));
    
            var lRSItemParameter = lRSItem != null ?
                new ObjectParameter("LRSItem", lRSItem) :
                new ObjectParameter("LRSItem", typeof(string));
    
            var lRSFetersCodeParameter = lRSFetersCode != null ?
                new ObjectParameter("LRSFetersCode", lRSFetersCode) :
                new ObjectParameter("LRSFetersCode", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FetersCodeDetailUpdate", fetersCodeDetailIdParameter, fetersCodeIdParameter, groupNoParameter, purposeGroupNameParameter, lRSItemParameter, lRSFetersCodeParameter, modifiedByParameter, result);
        }
    
        public virtual int FetersCodeGroupDetailAdd(Nullable<int> fetersCodeDetailId, string purposeCode, string description, Nullable<int> createdBy, ObjectParameter result)
        {
            var fetersCodeDetailIdParameter = fetersCodeDetailId.HasValue ?
                new ObjectParameter("FetersCodeDetailId", fetersCodeDetailId) :
                new ObjectParameter("FetersCodeDetailId", typeof(int));
    
            var purposeCodeParameter = purposeCode != null ?
                new ObjectParameter("PurposeCode", purposeCode) :
                new ObjectParameter("PurposeCode", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FetersCodeGroupDetailAdd", fetersCodeDetailIdParameter, purposeCodeParameter, descriptionParameter, createdByParameter, result);
        }
    
        public virtual int FetersCodeGroupDetailDelete(Nullable<int> fetersCodeGroupDetailId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var fetersCodeGroupDetailIdParameter = fetersCodeGroupDetailId.HasValue ?
                new ObjectParameter("FetersCodeGroupDetailId", fetersCodeGroupDetailId) :
                new ObjectParameter("FetersCodeGroupDetailId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FetersCodeGroupDetailDelete", fetersCodeGroupDetailIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<FetersCodeGroupDetailGet_Result> FetersCodeGroupDetailGet(Nullable<int> fetersCodeGroupDetailId, Nullable<int> fetersCodeDetailId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var fetersCodeGroupDetailIdParameter = fetersCodeGroupDetailId.HasValue ?
                new ObjectParameter("FetersCodeGroupDetailId", fetersCodeGroupDetailId) :
                new ObjectParameter("FetersCodeGroupDetailId", typeof(int));
    
            var fetersCodeDetailIdParameter = fetersCodeDetailId.HasValue ?
                new ObjectParameter("FetersCodeDetailId", fetersCodeDetailId) :
                new ObjectParameter("FetersCodeDetailId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetersCodeGroupDetailGet_Result>("FetersCodeGroupDetailGet", fetersCodeGroupDetailIdParameter, fetersCodeDetailIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int FetersCodeGroupDetailUpdate(Nullable<int> fetersCodeGroupDetailId, Nullable<int> fetersCodeDetailId, string purposeCode, string description, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var fetersCodeGroupDetailIdParameter = fetersCodeGroupDetailId.HasValue ?
                new ObjectParameter("FetersCodeGroupDetailId", fetersCodeGroupDetailId) :
                new ObjectParameter("FetersCodeGroupDetailId", typeof(int));
    
            var fetersCodeDetailIdParameter = fetersCodeDetailId.HasValue ?
                new ObjectParameter("FetersCodeDetailId", fetersCodeDetailId) :
                new ObjectParameter("FetersCodeDetailId", typeof(int));
    
            var purposeCodeParameter = purposeCode != null ?
                new ObjectParameter("PurposeCode", purposeCode) :
                new ObjectParameter("PurposeCode", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FetersCodeGroupDetailUpdate", fetersCodeGroupDetailIdParameter, fetersCodeDetailIdParameter, purposeCodeParameter, descriptionParameter, modifiedByParameter, result);
        }
    
        public virtual int FIPBReviewAdd(string name, string pDF, Nullable<int> createdBy, ObjectParameter result)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var pDFParameter = pDF != null ?
                new ObjectParameter("PDF", pDF) :
                new ObjectParameter("PDF", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FIPBReviewAdd", nameParameter, pDFParameter, createdByParameter, result);
        }
    
        public virtual int FIPBReviewDelete(Nullable<int> fIPBReviewId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var fIPBReviewIdParameter = fIPBReviewId.HasValue ?
                new ObjectParameter("FIPBReviewId", fIPBReviewId) :
                new ObjectParameter("FIPBReviewId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FIPBReviewDelete", fIPBReviewIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<FIPBReviewGet_Result> FIPBReviewGet(Nullable<int> fIPBReviewId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var fIPBReviewIdParameter = fIPBReviewId.HasValue ?
                new ObjectParameter("FIPBReviewId", fIPBReviewId) :
                new ObjectParameter("FIPBReviewId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FIPBReviewGet_Result>("FIPBReviewGet", fIPBReviewIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int FIPBReviewUpdate(Nullable<int> fIPBReviewId, string name, string pDF, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var fIPBReviewIdParameter = fIPBReviewId.HasValue ?
                new ObjectParameter("FIPBReviewId", fIPBReviewId) :
                new ObjectParameter("FIPBReviewId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var pDFParameter = pDF != null ?
                new ObjectParameter("PDF", pDF) :
                new ObjectParameter("PDF", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FIPBReviewUpdate", fIPBReviewIdParameter, nameParameter, pDFParameter, modifiedByParameter, result);
        }
    
        public virtual int DIPPClarificationAdd(string clarificationTopic, string pDF, Nullable<int> createdBy, ObjectParameter result)
        {
            var clarificationTopicParameter = clarificationTopic != null ?
                new ObjectParameter("ClarificationTopic", clarificationTopic) :
                new ObjectParameter("ClarificationTopic", typeof(string));
    
            var pDFParameter = pDF != null ?
                new ObjectParameter("PDF", pDF) :
                new ObjectParameter("PDF", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DIPPClarificationAdd", clarificationTopicParameter, pDFParameter, createdByParameter, result);
        }
    
        public virtual int DIPPClarificationDelete(Nullable<int> dIPPClarificationId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var dIPPClarificationIdParameter = dIPPClarificationId.HasValue ?
                new ObjectParameter("DIPPClarificationId", dIPPClarificationId) :
                new ObjectParameter("DIPPClarificationId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DIPPClarificationDelete", dIPPClarificationIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<DIPPClarificationGet_Result> DIPPClarificationGet(Nullable<int> dIPPClarificationId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var dIPPClarificationIdParameter = dIPPClarificationId.HasValue ?
                new ObjectParameter("DIPPClarificationId", dIPPClarificationId) :
                new ObjectParameter("DIPPClarificationId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DIPPClarificationGet_Result>("DIPPClarificationGet", dIPPClarificationIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int DIPPClarificationUpdate(Nullable<int> dIPPClarificationId, string clarificationTopic, string pDF, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var dIPPClarificationIdParameter = dIPPClarificationId.HasValue ?
                new ObjectParameter("DIPPClarificationId", dIPPClarificationId) :
                new ObjectParameter("DIPPClarificationId", typeof(int));
    
            var clarificationTopicParameter = clarificationTopic != null ?
                new ObjectParameter("ClarificationTopic", clarificationTopic) :
                new ObjectParameter("ClarificationTopic", typeof(string));
    
            var pDFParameter = pDF != null ?
                new ObjectParameter("PDF", pDF) :
                new ObjectParameter("PDF", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DIPPClarificationUpdate", dIPPClarificationIdParameter, clarificationTopicParameter, pDFParameter, modifiedByParameter, result);
        }
    
        public virtual int FIPBPressReleaseCaseAdd(string ministryName, string meetingNo_Detail, string pDF, Nullable<int> createdBy, ObjectParameter result)
        {
            var ministryNameParameter = ministryName != null ?
                new ObjectParameter("MinistryName", ministryName) :
                new ObjectParameter("MinistryName", typeof(string));
    
            var meetingNo_DetailParameter = meetingNo_Detail != null ?
                new ObjectParameter("MeetingNo_Detail", meetingNo_Detail) :
                new ObjectParameter("MeetingNo_Detail", typeof(string));
    
            var pDFParameter = pDF != null ?
                new ObjectParameter("PDF", pDF) :
                new ObjectParameter("PDF", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FIPBPressReleaseCaseAdd", ministryNameParameter, meetingNo_DetailParameter, pDFParameter, createdByParameter, result);
        }
    
        public virtual int FIPBPressReleaseCaseDelete(Nullable<int> fIPBPressReleaseCaseId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var fIPBPressReleaseCaseIdParameter = fIPBPressReleaseCaseId.HasValue ?
                new ObjectParameter("FIPBPressReleaseCaseId", fIPBPressReleaseCaseId) :
                new ObjectParameter("FIPBPressReleaseCaseId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FIPBPressReleaseCaseDelete", fIPBPressReleaseCaseIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<FIPBPressReleaseCaseGet_Result> FIPBPressReleaseCaseGet(Nullable<int> fIPBPressReleaseCaseId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var fIPBPressReleaseCaseIdParameter = fIPBPressReleaseCaseId.HasValue ?
                new ObjectParameter("FIPBPressReleaseCaseId", fIPBPressReleaseCaseId) :
                new ObjectParameter("FIPBPressReleaseCaseId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FIPBPressReleaseCaseGet_Result>("FIPBPressReleaseCaseGet", fIPBPressReleaseCaseIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int FIPBPressReleaseCaseUpdate(Nullable<int> fIPBPressReleaseCaseId, string ministryName, string meetingNo_Detail, string pDF, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var fIPBPressReleaseCaseIdParameter = fIPBPressReleaseCaseId.HasValue ?
                new ObjectParameter("FIPBPressReleaseCaseId", fIPBPressReleaseCaseId) :
                new ObjectParameter("FIPBPressReleaseCaseId", typeof(int));
    
            var ministryNameParameter = ministryName != null ?
                new ObjectParameter("MinistryName", ministryName) :
                new ObjectParameter("MinistryName", typeof(string));
    
            var meetingNo_DetailParameter = meetingNo_Detail != null ?
                new ObjectParameter("MeetingNo_Detail", meetingNo_Detail) :
                new ObjectParameter("MeetingNo_Detail", typeof(string));
    
            var pDFParameter = pDF != null ?
                new ObjectParameter("PDF", pDF) :
                new ObjectParameter("PDF", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FIPBPressReleaseCaseUpdate", fIPBPressReleaseCaseIdParameter, ministryNameParameter, meetingNo_DetailParameter, pDFParameter, modifiedByParameter, result);
        }
    
        public virtual int FormSummaryDocumentationAdd(string topicName, string subMenuName, Nullable<int> createdBy, ObjectParameter result)
        {
            var topicNameParameter = topicName != null ?
                new ObjectParameter("TopicName", topicName) :
                new ObjectParameter("TopicName", typeof(string));
    
            var subMenuNameParameter = subMenuName != null ?
                new ObjectParameter("SubMenuName", subMenuName) :
                new ObjectParameter("SubMenuName", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FormSummaryDocumentationAdd", topicNameParameter, subMenuNameParameter, createdByParameter, result);
        }
    
        public virtual int FormSummaryDocumentationDelete(Nullable<int> formSummaryDocumentationId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var formSummaryDocumentationIdParameter = formSummaryDocumentationId.HasValue ?
                new ObjectParameter("FormSummaryDocumentationId", formSummaryDocumentationId) :
                new ObjectParameter("FormSummaryDocumentationId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FormSummaryDocumentationDelete", formSummaryDocumentationIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<FormSummaryDocumentationGet_Result> FormSummaryDocumentationGet(Nullable<int> formSummaryDocumentationId, string subMenuName, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var formSummaryDocumentationIdParameter = formSummaryDocumentationId.HasValue ?
                new ObjectParameter("FormSummaryDocumentationId", formSummaryDocumentationId) :
                new ObjectParameter("FormSummaryDocumentationId", typeof(int));
    
            var subMenuNameParameter = subMenuName != null ?
                new ObjectParameter("SubMenuName", subMenuName) :
                new ObjectParameter("SubMenuName", typeof(string));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FormSummaryDocumentationGet_Result>("FormSummaryDocumentationGet", formSummaryDocumentationIdParameter, subMenuNameParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int FormSummaryDocumentationUpdate(Nullable<int> formSummaryDocumentationId, string topicName, string subMenuName, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var formSummaryDocumentationIdParameter = formSummaryDocumentationId.HasValue ?
                new ObjectParameter("FormSummaryDocumentationId", formSummaryDocumentationId) :
                new ObjectParameter("FormSummaryDocumentationId", typeof(int));
    
            var topicNameParameter = topicName != null ?
                new ObjectParameter("TopicName", topicName) :
                new ObjectParameter("TopicName", typeof(string));
    
            var subMenuNameParameter = subMenuName != null ?
                new ObjectParameter("SubMenuName", subMenuName) :
                new ObjectParameter("SubMenuName", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FormSummaryDocumentationUpdate", formSummaryDocumentationIdParameter, topicNameParameter, subMenuNameParameter, modifiedByParameter, result);
        }
    
        public virtual int FormSummaryDocumentationDetailAdd(Nullable<int> formSummaryDocumentationId, string formName, string wordFileName, string excelFileName, string pDFFileName, string subMenuName, Nullable<int> createdBy, ObjectParameter result)
        {
            var formSummaryDocumentationIdParameter = formSummaryDocumentationId.HasValue ?
                new ObjectParameter("FormSummaryDocumentationId", formSummaryDocumentationId) :
                new ObjectParameter("FormSummaryDocumentationId", typeof(int));
    
            var formNameParameter = formName != null ?
                new ObjectParameter("FormName", formName) :
                new ObjectParameter("FormName", typeof(string));
    
            var wordFileNameParameter = wordFileName != null ?
                new ObjectParameter("WordFileName", wordFileName) :
                new ObjectParameter("WordFileName", typeof(string));
    
            var excelFileNameParameter = excelFileName != null ?
                new ObjectParameter("ExcelFileName", excelFileName) :
                new ObjectParameter("ExcelFileName", typeof(string));
    
            var pDFFileNameParameter = pDFFileName != null ?
                new ObjectParameter("PDFFileName", pDFFileName) :
                new ObjectParameter("PDFFileName", typeof(string));
    
            var subMenuNameParameter = subMenuName != null ?
                new ObjectParameter("SubMenuName", subMenuName) :
                new ObjectParameter("SubMenuName", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FormSummaryDocumentationDetailAdd", formSummaryDocumentationIdParameter, formNameParameter, wordFileNameParameter, excelFileNameParameter, pDFFileNameParameter, subMenuNameParameter, createdByParameter, result);
        }
    
        public virtual int FormSummaryDocumentationDetailDelete(Nullable<int> formSummaryDocumentationDetailId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var formSummaryDocumentationDetailIdParameter = formSummaryDocumentationDetailId.HasValue ?
                new ObjectParameter("FormSummaryDocumentationDetailId", formSummaryDocumentationDetailId) :
                new ObjectParameter("FormSummaryDocumentationDetailId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FormSummaryDocumentationDetailDelete", formSummaryDocumentationDetailIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<FormSummaryDocumentationDetailGet_Result> FormSummaryDocumentationDetailGet(Nullable<int> formSummaryDocumentationDetailId, Nullable<int> formSummaryDocumentationId, string subMenuName, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var formSummaryDocumentationDetailIdParameter = formSummaryDocumentationDetailId.HasValue ?
                new ObjectParameter("FormSummaryDocumentationDetailId", formSummaryDocumentationDetailId) :
                new ObjectParameter("FormSummaryDocumentationDetailId", typeof(int));
    
            var formSummaryDocumentationIdParameter = formSummaryDocumentationId.HasValue ?
                new ObjectParameter("FormSummaryDocumentationId", formSummaryDocumentationId) :
                new ObjectParameter("FormSummaryDocumentationId", typeof(int));
    
            var subMenuNameParameter = subMenuName != null ?
                new ObjectParameter("SubMenuName", subMenuName) :
                new ObjectParameter("SubMenuName", typeof(string));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FormSummaryDocumentationDetailGet_Result>("FormSummaryDocumentationDetailGet", formSummaryDocumentationDetailIdParameter, formSummaryDocumentationIdParameter, subMenuNameParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int FormSummaryDocumentationDetailUpdate(Nullable<int> formSummaryDocumentationDetailId, Nullable<int> formSummaryDocumentationId, string formName, string wordFileName, string excelFileName, string pDFFileName, string subMenuName, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var formSummaryDocumentationDetailIdParameter = formSummaryDocumentationDetailId.HasValue ?
                new ObjectParameter("FormSummaryDocumentationDetailId", formSummaryDocumentationDetailId) :
                new ObjectParameter("FormSummaryDocumentationDetailId", typeof(int));
    
            var formSummaryDocumentationIdParameter = formSummaryDocumentationId.HasValue ?
                new ObjectParameter("FormSummaryDocumentationId", formSummaryDocumentationId) :
                new ObjectParameter("FormSummaryDocumentationId", typeof(int));
    
            var formNameParameter = formName != null ?
                new ObjectParameter("FormName", formName) :
                new ObjectParameter("FormName", typeof(string));
    
            var wordFileNameParameter = wordFileName != null ?
                new ObjectParameter("WordFileName", wordFileName) :
                new ObjectParameter("WordFileName", typeof(string));
    
            var excelFileNameParameter = excelFileName != null ?
                new ObjectParameter("ExcelFileName", excelFileName) :
                new ObjectParameter("ExcelFileName", typeof(string));
    
            var pDFFileNameParameter = pDFFileName != null ?
                new ObjectParameter("PDFFileName", pDFFileName) :
                new ObjectParameter("PDFFileName", typeof(string));
    
            var subMenuNameParameter = subMenuName != null ?
                new ObjectParameter("SubMenuName", subMenuName) :
                new ObjectParameter("SubMenuName", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FormSummaryDocumentationDetailUpdate", formSummaryDocumentationDetailIdParameter, formSummaryDocumentationIdParameter, formNameParameter, wordFileNameParameter, excelFileNameParameter, pDFFileNameParameter, subMenuNameParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<RBILiaisonOfficeGet_Result> RBILiaisonOfficeGet(Nullable<int> rBILiaisonOfficeId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var rBILiaisonOfficeIdParameter = rBILiaisonOfficeId.HasValue ?
                new ObjectParameter("RBILiaisonOfficeId", rBILiaisonOfficeId) :
                new ObjectParameter("RBILiaisonOfficeId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RBILiaisonOfficeGet_Result>("RBILiaisonOfficeGet", rBILiaisonOfficeIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int RBILiaisonOfficeAddFromXML(string rBILiaisonOffices, Nullable<int> createdBy, ObjectParameter rBILiaisonOfficesResult, ObjectParameter result)
        {
            var rBILiaisonOfficesParameter = rBILiaisonOffices != null ?
                new ObjectParameter("RBILiaisonOffices", rBILiaisonOffices) :
                new ObjectParameter("RBILiaisonOffices", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RBILiaisonOfficeAddFromXML", rBILiaisonOfficesParameter, createdByParameter, rBILiaisonOfficesResult, result);
        }
    
        public virtual int RBICompoundingOrderAdd(string applicantName, string orderGist, string topic, string fEMRegulationRuleNo, Nullable<System.DateTime> orderDate, Nullable<decimal> penaltyAmount, string regional_CentralOfficeOfRBI, string pDF, Nullable<int> createdBy, ObjectParameter result)
        {
            var applicantNameParameter = applicantName != null ?
                new ObjectParameter("ApplicantName", applicantName) :
                new ObjectParameter("ApplicantName", typeof(string));
    
            var orderGistParameter = orderGist != null ?
                new ObjectParameter("OrderGist", orderGist) :
                new ObjectParameter("OrderGist", typeof(string));
    
            var topicParameter = topic != null ?
                new ObjectParameter("Topic", topic) :
                new ObjectParameter("Topic", typeof(string));
    
            var fEMRegulationRuleNoParameter = fEMRegulationRuleNo != null ?
                new ObjectParameter("FEMRegulationRuleNo", fEMRegulationRuleNo) :
                new ObjectParameter("FEMRegulationRuleNo", typeof(string));
    
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("OrderDate", orderDate) :
                new ObjectParameter("OrderDate", typeof(System.DateTime));
    
            var penaltyAmountParameter = penaltyAmount.HasValue ?
                new ObjectParameter("PenaltyAmount", penaltyAmount) :
                new ObjectParameter("PenaltyAmount", typeof(decimal));
    
            var regional_CentralOfficeOfRBIParameter = regional_CentralOfficeOfRBI != null ?
                new ObjectParameter("Regional_CentralOfficeOfRBI", regional_CentralOfficeOfRBI) :
                new ObjectParameter("Regional_CentralOfficeOfRBI", typeof(string));
    
            var pDFParameter = pDF != null ?
                new ObjectParameter("PDF", pDF) :
                new ObjectParameter("PDF", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RBICompoundingOrderAdd", applicantNameParameter, orderGistParameter, topicParameter, fEMRegulationRuleNoParameter, orderDateParameter, penaltyAmountParameter, regional_CentralOfficeOfRBIParameter, pDFParameter, createdByParameter, result);
        }
    
        public virtual int RBICompoundingOrderDelete(Nullable<int> rBICompoundingOrderId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var rBICompoundingOrderIdParameter = rBICompoundingOrderId.HasValue ?
                new ObjectParameter("RBICompoundingOrderId", rBICompoundingOrderId) :
                new ObjectParameter("RBICompoundingOrderId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RBICompoundingOrderDelete", rBICompoundingOrderIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<RBICompoundingOrderGet_Result> RBICompoundingOrderGet(Nullable<int> rBICompoundingOrderId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var rBICompoundingOrderIdParameter = rBICompoundingOrderId.HasValue ?
                new ObjectParameter("RBICompoundingOrderId", rBICompoundingOrderId) :
                new ObjectParameter("RBICompoundingOrderId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RBICompoundingOrderGet_Result>("RBICompoundingOrderGet", rBICompoundingOrderIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int RBICompoundingOrderUpdate(Nullable<int> rBICompoundingOrderId, string applicantName, string orderGist, string topic, string fEMRegulationRuleNo, Nullable<System.DateTime> orderDate, Nullable<decimal> penaltyAmount, string regional_CentralOfficeOfRBI, string pDF, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var rBICompoundingOrderIdParameter = rBICompoundingOrderId.HasValue ?
                new ObjectParameter("RBICompoundingOrderId", rBICompoundingOrderId) :
                new ObjectParameter("RBICompoundingOrderId", typeof(int));
    
            var applicantNameParameter = applicantName != null ?
                new ObjectParameter("ApplicantName", applicantName) :
                new ObjectParameter("ApplicantName", typeof(string));
    
            var orderGistParameter = orderGist != null ?
                new ObjectParameter("OrderGist", orderGist) :
                new ObjectParameter("OrderGist", typeof(string));
    
            var topicParameter = topic != null ?
                new ObjectParameter("Topic", topic) :
                new ObjectParameter("Topic", typeof(string));
    
            var fEMRegulationRuleNoParameter = fEMRegulationRuleNo != null ?
                new ObjectParameter("FEMRegulationRuleNo", fEMRegulationRuleNo) :
                new ObjectParameter("FEMRegulationRuleNo", typeof(string));
    
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("OrderDate", orderDate) :
                new ObjectParameter("OrderDate", typeof(System.DateTime));
    
            var penaltyAmountParameter = penaltyAmount.HasValue ?
                new ObjectParameter("PenaltyAmount", penaltyAmount) :
                new ObjectParameter("PenaltyAmount", typeof(decimal));
    
            var regional_CentralOfficeOfRBIParameter = regional_CentralOfficeOfRBI != null ?
                new ObjectParameter("Regional_CentralOfficeOfRBI", regional_CentralOfficeOfRBI) :
                new ObjectParameter("Regional_CentralOfficeOfRBI", typeof(string));
    
            var pDFParameter = pDF != null ?
                new ObjectParameter("PDF", pDF) :
                new ObjectParameter("PDF", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RBICompoundingOrderUpdate", rBICompoundingOrderIdParameter, applicantNameParameter, orderGistParameter, topicParameter, fEMRegulationRuleNoParameter, orderDateParameter, penaltyAmountParameter, regional_CentralOfficeOfRBIParameter, pDFParameter, modifiedByParameter, result);
        }
    
        public virtual int RBIDataAdd(string rBIDataName, string excel, Nullable<int> createdBy, ObjectParameter result)
        {
            var rBIDataNameParameter = rBIDataName != null ?
                new ObjectParameter("RBIDataName", rBIDataName) :
                new ObjectParameter("RBIDataName", typeof(string));
    
            var excelParameter = excel != null ?
                new ObjectParameter("Excel", excel) :
                new ObjectParameter("Excel", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RBIDataAdd", rBIDataNameParameter, excelParameter, createdByParameter, result);
        }
    
        public virtual int RBIDataDelete(Nullable<int> rBIDataId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var rBIDataIdParameter = rBIDataId.HasValue ?
                new ObjectParameter("RBIDataId", rBIDataId) :
                new ObjectParameter("RBIDataId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RBIDataDelete", rBIDataIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<RBIDataGet_Result> RBIDataGet(Nullable<int> rBIDataId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var rBIDataIdParameter = rBIDataId.HasValue ?
                new ObjectParameter("RBIDataId", rBIDataId) :
                new ObjectParameter("RBIDataId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RBIDataGet_Result>("RBIDataGet", rBIDataIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int RBIDataUpdate(Nullable<int> rBIDataId, string rBIDataName, string excel, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var rBIDataIdParameter = rBIDataId.HasValue ?
                new ObjectParameter("RBIDataId", rBIDataId) :
                new ObjectParameter("RBIDataId", typeof(int));
    
            var rBIDataNameParameter = rBIDataName != null ?
                new ObjectParameter("RBIDataName", rBIDataName) :
                new ObjectParameter("RBIDataName", typeof(string));
    
            var excelParameter = excel != null ?
                new ObjectParameter("Excel", excel) :
                new ObjectParameter("Excel", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RBIDataUpdate", rBIDataIdParameter, rBIDataNameParameter, excelParameter, modifiedByParameter, result);
        }
    
        public virtual int RBIDataDetailAdd(Nullable<int> rBIDataId, Nullable<int> month, Nullable<int> year, string excel, string pDF, Nullable<int> createdBy, ObjectParameter result)
        {
            var rBIDataIdParameter = rBIDataId.HasValue ?
                new ObjectParameter("RBIDataId", rBIDataId) :
                new ObjectParameter("RBIDataId", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var excelParameter = excel != null ?
                new ObjectParameter("Excel", excel) :
                new ObjectParameter("Excel", typeof(string));
    
            var pDFParameter = pDF != null ?
                new ObjectParameter("PDF", pDF) :
                new ObjectParameter("PDF", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RBIDataDetailAdd", rBIDataIdParameter, monthParameter, yearParameter, excelParameter, pDFParameter, createdByParameter, result);
        }
    
        public virtual int RBIDataDetailDelete(Nullable<int> rBIDataDetailId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var rBIDataDetailIdParameter = rBIDataDetailId.HasValue ?
                new ObjectParameter("RBIDataDetailId", rBIDataDetailId) :
                new ObjectParameter("RBIDataDetailId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RBIDataDetailDelete", rBIDataDetailIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<RBIDataDetailGet_Result> RBIDataDetailGet(Nullable<int> rBIDataDetailId, Nullable<int> rBIDataId, Nullable<int> year, Nullable<int> month, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var rBIDataDetailIdParameter = rBIDataDetailId.HasValue ?
                new ObjectParameter("RBIDataDetailId", rBIDataDetailId) :
                new ObjectParameter("RBIDataDetailId", typeof(int));
    
            var rBIDataIdParameter = rBIDataId.HasValue ?
                new ObjectParameter("RBIDataId", rBIDataId) :
                new ObjectParameter("RBIDataId", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RBIDataDetailGet_Result>("RBIDataDetailGet", rBIDataDetailIdParameter, rBIDataIdParameter, yearParameter, monthParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int RBIDataDetailUpdate(Nullable<int> rBIDataDetailId, Nullable<int> rBIDataId, Nullable<int> month, Nullable<int> year, string excel, string pDF, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var rBIDataDetailIdParameter = rBIDataDetailId.HasValue ?
                new ObjectParameter("RBIDataDetailId", rBIDataDetailId) :
                new ObjectParameter("RBIDataDetailId", typeof(int));
    
            var rBIDataIdParameter = rBIDataId.HasValue ?
                new ObjectParameter("RBIDataId", rBIDataId) :
                new ObjectParameter("RBIDataId", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var excelParameter = excel != null ?
                new ObjectParameter("Excel", excel) :
                new ObjectParameter("Excel", typeof(string));
    
            var pDFParameter = pDF != null ?
                new ObjectParameter("PDF", pDF) :
                new ObjectParameter("PDF", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RBIDataDetailUpdate", rBIDataDetailIdParameter, rBIDataIdParameter, monthParameter, yearParameter, excelParameter, pDFParameter, modifiedByParameter, result);
        }
    
        public virtual int RulesAdd(string rulesName, string rulesNo, Nullable<int> year, Nullable<System.DateTime> publicationDate, Nullable<int> createdBy, ObjectParameter result)
        {
            var rulesNameParameter = rulesName != null ?
                new ObjectParameter("RulesName", rulesName) :
                new ObjectParameter("RulesName", typeof(string));
    
            var rulesNoParameter = rulesNo != null ?
                new ObjectParameter("RulesNo", rulesNo) :
                new ObjectParameter("RulesNo", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var publicationDateParameter = publicationDate.HasValue ?
                new ObjectParameter("PublicationDate", publicationDate) :
                new ObjectParameter("PublicationDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RulesAdd", rulesNameParameter, rulesNoParameter, yearParameter, publicationDateParameter, createdByParameter, result);
        }
    
        public virtual int RulesDelete(Nullable<int> rulesId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var rulesIdParameter = rulesId.HasValue ?
                new ObjectParameter("RulesId", rulesId) :
                new ObjectParameter("RulesId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RulesDelete", rulesIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<RulesGet_Result> RulesGet(Nullable<int> rulesId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var rulesIdParameter = rulesId.HasValue ?
                new ObjectParameter("RulesId", rulesId) :
                new ObjectParameter("RulesId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RulesGet_Result>("RulesGet", rulesIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int RulesUpdate(Nullable<int> rulesId, string rulesName, string rulesNo, Nullable<int> year, Nullable<System.DateTime> publicationDate, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var rulesIdParameter = rulesId.HasValue ?
                new ObjectParameter("RulesId", rulesId) :
                new ObjectParameter("RulesId", typeof(int));
    
            var rulesNameParameter = rulesName != null ?
                new ObjectParameter("RulesName", rulesName) :
                new ObjectParameter("RulesName", typeof(string));
    
            var rulesNoParameter = rulesNo != null ?
                new ObjectParameter("RulesNo", rulesNo) :
                new ObjectParameter("RulesNo", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var publicationDateParameter = publicationDate.HasValue ?
                new ObjectParameter("PublicationDate", publicationDate) :
                new ObjectParameter("PublicationDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RulesUpdate", rulesIdParameter, rulesNameParameter, rulesNoParameter, yearParameter, publicationDateParameter, modifiedByParameter, result);
        }
    
        public virtual int RulesIndexAdd(Nullable<int> rulesId, string indexNo, string indexname, string indexContent, Nullable<int> saveAfterIndexId, Nullable<int> createdBy, ObjectParameter result)
        {
            var rulesIdParameter = rulesId.HasValue ?
                new ObjectParameter("RulesId", rulesId) :
                new ObjectParameter("RulesId", typeof(int));
    
            var indexNoParameter = indexNo != null ?
                new ObjectParameter("IndexNo", indexNo) :
                new ObjectParameter("IndexNo", typeof(string));
    
            var indexnameParameter = indexname != null ?
                new ObjectParameter("Indexname", indexname) :
                new ObjectParameter("Indexname", typeof(string));
    
            var indexContentParameter = indexContent != null ?
                new ObjectParameter("IndexContent", indexContent) :
                new ObjectParameter("IndexContent", typeof(string));
    
            var saveAfterIndexIdParameter = saveAfterIndexId.HasValue ?
                new ObjectParameter("SaveAfterIndexId", saveAfterIndexId) :
                new ObjectParameter("SaveAfterIndexId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RulesIndexAdd", rulesIdParameter, indexNoParameter, indexnameParameter, indexContentParameter, saveAfterIndexIdParameter, createdByParameter, result);
        }
    
        public virtual int RulesIndexDelete(Nullable<int> indexId, Nullable<int> rulesId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var indexIdParameter = indexId.HasValue ?
                new ObjectParameter("IndexId", indexId) :
                new ObjectParameter("IndexId", typeof(int));
    
            var rulesIdParameter = rulesId.HasValue ?
                new ObjectParameter("RulesId", rulesId) :
                new ObjectParameter("RulesId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RulesIndexDelete", indexIdParameter, rulesIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<RulesIndexGet_Result> RulesIndexGet(Nullable<int> indexId, Nullable<int> rulesId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var indexIdParameter = indexId.HasValue ?
                new ObjectParameter("IndexId", indexId) :
                new ObjectParameter("IndexId", typeof(int));
    
            var rulesIdParameter = rulesId.HasValue ?
                new ObjectParameter("RulesId", rulesId) :
                new ObjectParameter("RulesId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RulesIndexGet_Result>("RulesIndexGet", indexIdParameter, rulesIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int RulesIndexUpdate(Nullable<int> indexId, Nullable<int> rulesId, string indexNo, string indexname, string indexContent, Nullable<int> saveAfterIndexId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var indexIdParameter = indexId.HasValue ?
                new ObjectParameter("IndexId", indexId) :
                new ObjectParameter("IndexId", typeof(int));
    
            var rulesIdParameter = rulesId.HasValue ?
                new ObjectParameter("RulesId", rulesId) :
                new ObjectParameter("RulesId", typeof(int));
    
            var indexNoParameter = indexNo != null ?
                new ObjectParameter("IndexNo", indexNo) :
                new ObjectParameter("IndexNo", typeof(string));
    
            var indexnameParameter = indexname != null ?
                new ObjectParameter("Indexname", indexname) :
                new ObjectParameter("Indexname", typeof(string));
    
            var indexContentParameter = indexContent != null ?
                new ObjectParameter("IndexContent", indexContent) :
                new ObjectParameter("IndexContent", typeof(string));
    
            var saveAfterIndexIdParameter = saveAfterIndexId.HasValue ?
                new ObjectParameter("SaveAfterIndexId", saveAfterIndexId) :
                new ObjectParameter("SaveAfterIndexId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RulesIndexUpdate", indexIdParameter, rulesIdParameter, indexNoParameter, indexnameParameter, indexContentParameter, saveAfterIndexIdParameter, modifiedByParameter, result);
        }
    
        public virtual int RulesSubIndexAdd(Nullable<int> indexId, string subIndexNumber, string subIndexName, string subIndexContent, Nullable<int> saveAfterSubIndexId, Nullable<int> createdBy, ObjectParameter result)
        {
            var indexIdParameter = indexId.HasValue ?
                new ObjectParameter("IndexId", indexId) :
                new ObjectParameter("IndexId", typeof(int));
    
            var subIndexNumberParameter = subIndexNumber != null ?
                new ObjectParameter("SubIndexNumber", subIndexNumber) :
                new ObjectParameter("SubIndexNumber", typeof(string));
    
            var subIndexNameParameter = subIndexName != null ?
                new ObjectParameter("SubIndexName", subIndexName) :
                new ObjectParameter("SubIndexName", typeof(string));
    
            var subIndexContentParameter = subIndexContent != null ?
                new ObjectParameter("SubIndexContent", subIndexContent) :
                new ObjectParameter("SubIndexContent", typeof(string));
    
            var saveAfterSubIndexIdParameter = saveAfterSubIndexId.HasValue ?
                new ObjectParameter("SaveAfterSubIndexId", saveAfterSubIndexId) :
                new ObjectParameter("SaveAfterSubIndexId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RulesSubIndexAdd", indexIdParameter, subIndexNumberParameter, subIndexNameParameter, subIndexContentParameter, saveAfterSubIndexIdParameter, createdByParameter, result);
        }
    
        public virtual int RulesSubIndexDelete(Nullable<int> rulesSubIndexId, Nullable<int> indexId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var rulesSubIndexIdParameter = rulesSubIndexId.HasValue ?
                new ObjectParameter("RulesSubIndexId", rulesSubIndexId) :
                new ObjectParameter("RulesSubIndexId", typeof(int));
    
            var indexIdParameter = indexId.HasValue ?
                new ObjectParameter("IndexId", indexId) :
                new ObjectParameter("IndexId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RulesSubIndexDelete", rulesSubIndexIdParameter, indexIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<RulesSubIndexGet_Result> RulesSubIndexGet(Nullable<int> rulesSubIndexId, Nullable<int> indexId, Nullable<int> rulesId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var rulesSubIndexIdParameter = rulesSubIndexId.HasValue ?
                new ObjectParameter("RulesSubIndexId", rulesSubIndexId) :
                new ObjectParameter("RulesSubIndexId", typeof(int));
    
            var indexIdParameter = indexId.HasValue ?
                new ObjectParameter("IndexId", indexId) :
                new ObjectParameter("IndexId", typeof(int));
    
            var rulesIdParameter = rulesId.HasValue ?
                new ObjectParameter("RulesId", rulesId) :
                new ObjectParameter("RulesId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RulesSubIndexGet_Result>("RulesSubIndexGet", rulesSubIndexIdParameter, indexIdParameter, rulesIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int RulesSubIndexUpdate(Nullable<int> rulesSubIndexId, Nullable<int> indexId, string subIndexNumber, string subIndexName, string subIndexContent, Nullable<int> saveAfterSubIndexId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var rulesSubIndexIdParameter = rulesSubIndexId.HasValue ?
                new ObjectParameter("RulesSubIndexId", rulesSubIndexId) :
                new ObjectParameter("RulesSubIndexId", typeof(int));
    
            var indexIdParameter = indexId.HasValue ?
                new ObjectParameter("IndexId", indexId) :
                new ObjectParameter("IndexId", typeof(int));
    
            var subIndexNumberParameter = subIndexNumber != null ?
                new ObjectParameter("SubIndexNumber", subIndexNumber) :
                new ObjectParameter("SubIndexNumber", typeof(string));
    
            var subIndexNameParameter = subIndexName != null ?
                new ObjectParameter("SubIndexName", subIndexName) :
                new ObjectParameter("SubIndexName", typeof(string));
    
            var subIndexContentParameter = subIndexContent != null ?
                new ObjectParameter("SubIndexContent", subIndexContent) :
                new ObjectParameter("SubIndexContent", typeof(string));
    
            var saveAfterSubIndexIdParameter = saveAfterSubIndexId.HasValue ?
                new ObjectParameter("SaveAfterSubIndexId", saveAfterSubIndexId) :
                new ObjectParameter("SaveAfterSubIndexId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RulesSubIndexUpdate", rulesSubIndexIdParameter, indexIdParameter, subIndexNumberParameter, subIndexNameParameter, subIndexContentParameter, saveAfterSubIndexIdParameter, modifiedByParameter, result);
        }
    
        public virtual int GSRNotificationAdd(Nullable<int> rulesId, string gSRNotificationNo, string gSRNotificationName, Nullable<System.DateTime> gSRNotificationDate, Nullable<System.DateTime> gSRNotificationEffectiveDate, Nullable<int> gSRNotificationTypeId, string pDF, Nullable<int> createdBy, ObjectParameter result)
        {
            var rulesIdParameter = rulesId.HasValue ?
                new ObjectParameter("RulesId", rulesId) :
                new ObjectParameter("RulesId", typeof(int));
    
            var gSRNotificationNoParameter = gSRNotificationNo != null ?
                new ObjectParameter("GSRNotificationNo", gSRNotificationNo) :
                new ObjectParameter("GSRNotificationNo", typeof(string));
    
            var gSRNotificationNameParameter = gSRNotificationName != null ?
                new ObjectParameter("GSRNotificationName", gSRNotificationName) :
                new ObjectParameter("GSRNotificationName", typeof(string));
    
            var gSRNotificationDateParameter = gSRNotificationDate.HasValue ?
                new ObjectParameter("GSRNotificationDate", gSRNotificationDate) :
                new ObjectParameter("GSRNotificationDate", typeof(System.DateTime));
    
            var gSRNotificationEffectiveDateParameter = gSRNotificationEffectiveDate.HasValue ?
                new ObjectParameter("GSRNotificationEffectiveDate", gSRNotificationEffectiveDate) :
                new ObjectParameter("GSRNotificationEffectiveDate", typeof(System.DateTime));
    
            var gSRNotificationTypeIdParameter = gSRNotificationTypeId.HasValue ?
                new ObjectParameter("GSRNotificationTypeId", gSRNotificationTypeId) :
                new ObjectParameter("GSRNotificationTypeId", typeof(int));
    
            var pDFParameter = pDF != null ?
                new ObjectParameter("PDF", pDF) :
                new ObjectParameter("PDF", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GSRNotificationAdd", rulesIdParameter, gSRNotificationNoParameter, gSRNotificationNameParameter, gSRNotificationDateParameter, gSRNotificationEffectiveDateParameter, gSRNotificationTypeIdParameter, pDFParameter, createdByParameter, result);
        }
    
        public virtual int GSRNotificationDelete(Nullable<int> gSRNotificationId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var gSRNotificationIdParameter = gSRNotificationId.HasValue ?
                new ObjectParameter("GSRNotificationId", gSRNotificationId) :
                new ObjectParameter("GSRNotificationId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GSRNotificationDelete", gSRNotificationIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<GSRNotificationGet_Result> GSRNotificationGet(Nullable<int> gSRNotificationId, Nullable<int> rulesId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var gSRNotificationIdParameter = gSRNotificationId.HasValue ?
                new ObjectParameter("GSRNotificationId", gSRNotificationId) :
                new ObjectParameter("GSRNotificationId", typeof(int));
    
            var rulesIdParameter = rulesId.HasValue ?
                new ObjectParameter("RulesId", rulesId) :
                new ObjectParameter("RulesId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GSRNotificationGet_Result>("GSRNotificationGet", gSRNotificationIdParameter, rulesIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual ObjectResult<GSRNotificationTypeGet_Result> GSRNotificationTypeGet(Nullable<int> gSRNotificationTypeId)
        {
            var gSRNotificationTypeIdParameter = gSRNotificationTypeId.HasValue ?
                new ObjectParameter("GSRNotificationTypeId", gSRNotificationTypeId) :
                new ObjectParameter("GSRNotificationTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GSRNotificationTypeGet_Result>("GSRNotificationTypeGet", gSRNotificationTypeIdParameter);
        }
    
        public virtual int GSRNotificationUpdate(Nullable<int> gSRNotificationId, Nullable<int> rulesId, string gSRNotificationNo, string gSRNotificationName, Nullable<System.DateTime> gSRNotificationDate, Nullable<System.DateTime> gSRNotificationEffectiveDate, Nullable<int> gSRNotificationTypeId, string pDF, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var gSRNotificationIdParameter = gSRNotificationId.HasValue ?
                new ObjectParameter("GSRNotificationId", gSRNotificationId) :
                new ObjectParameter("GSRNotificationId", typeof(int));
    
            var rulesIdParameter = rulesId.HasValue ?
                new ObjectParameter("RulesId", rulesId) :
                new ObjectParameter("RulesId", typeof(int));
    
            var gSRNotificationNoParameter = gSRNotificationNo != null ?
                new ObjectParameter("GSRNotificationNo", gSRNotificationNo) :
                new ObjectParameter("GSRNotificationNo", typeof(string));
    
            var gSRNotificationNameParameter = gSRNotificationName != null ?
                new ObjectParameter("GSRNotificationName", gSRNotificationName) :
                new ObjectParameter("GSRNotificationName", typeof(string));
    
            var gSRNotificationDateParameter = gSRNotificationDate.HasValue ?
                new ObjectParameter("GSRNotificationDate", gSRNotificationDate) :
                new ObjectParameter("GSRNotificationDate", typeof(System.DateTime));
    
            var gSRNotificationEffectiveDateParameter = gSRNotificationEffectiveDate.HasValue ?
                new ObjectParameter("GSRNotificationEffectiveDate", gSRNotificationEffectiveDate) :
                new ObjectParameter("GSRNotificationEffectiveDate", typeof(System.DateTime));
    
            var gSRNotificationTypeIdParameter = gSRNotificationTypeId.HasValue ?
                new ObjectParameter("GSRNotificationTypeId", gSRNotificationTypeId) :
                new ObjectParameter("GSRNotificationTypeId", typeof(int));
    
            var pDFParameter = pDF != null ?
                new ObjectParameter("PDF", pDF) :
                new ObjectParameter("PDF", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GSRNotificationUpdate", gSRNotificationIdParameter, rulesIdParameter, gSRNotificationNoParameter, gSRNotificationNameParameter, gSRNotificationDateParameter, gSRNotificationEffectiveDateParameter, gSRNotificationTypeIdParameter, pDFParameter, modifiedByParameter, result);
        }
    
        public virtual int RulesIndexAmendmentAdd(Nullable<int> rulesId, string gSRNotificationIds, Nullable<int> indexId, Nullable<int> subIndexId, string indexAmendmentContent, Nullable<int> createdBy, ObjectParameter result)
        {
            var rulesIdParameter = rulesId.HasValue ?
                new ObjectParameter("RulesId", rulesId) :
                new ObjectParameter("RulesId", typeof(int));
    
            var gSRNotificationIdsParameter = gSRNotificationIds != null ?
                new ObjectParameter("GSRNotificationIds", gSRNotificationIds) :
                new ObjectParameter("GSRNotificationIds", typeof(string));
    
            var indexIdParameter = indexId.HasValue ?
                new ObjectParameter("IndexId", indexId) :
                new ObjectParameter("IndexId", typeof(int));
    
            var subIndexIdParameter = subIndexId.HasValue ?
                new ObjectParameter("SubIndexId", subIndexId) :
                new ObjectParameter("SubIndexId", typeof(int));
    
            var indexAmendmentContentParameter = indexAmendmentContent != null ?
                new ObjectParameter("IndexAmendmentContent", indexAmendmentContent) :
                new ObjectParameter("IndexAmendmentContent", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RulesIndexAmendmentAdd", rulesIdParameter, gSRNotificationIdsParameter, indexIdParameter, subIndexIdParameter, indexAmendmentContentParameter, createdByParameter, result);
        }
    
        public virtual int RulesIndexAmendmentDelete(Nullable<int> rulesIndexAmendmentId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var rulesIndexAmendmentIdParameter = rulesIndexAmendmentId.HasValue ?
                new ObjectParameter("RulesIndexAmendmentId", rulesIndexAmendmentId) :
                new ObjectParameter("RulesIndexAmendmentId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RulesIndexAmendmentDelete", rulesIndexAmendmentIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<RulesIndexAmendmentGet_Result> RulesIndexAmendmentGet(Nullable<int> rulesIndexAmendmentId, Nullable<int> rulesId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var rulesIndexAmendmentIdParameter = rulesIndexAmendmentId.HasValue ?
                new ObjectParameter("RulesIndexAmendmentId", rulesIndexAmendmentId) :
                new ObjectParameter("RulesIndexAmendmentId", typeof(int));
    
            var rulesIdParameter = rulesId.HasValue ?
                new ObjectParameter("RulesId", rulesId) :
                new ObjectParameter("RulesId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RulesIndexAmendmentGet_Result>("RulesIndexAmendmentGet", rulesIndexAmendmentIdParameter, rulesIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int RulesIndexAmendmentUpdate(Nullable<int> rulesIndexAmendmentId, Nullable<int> rulesId, string gSRNotificationIds, Nullable<int> indexId, Nullable<int> subIndexId, string indexAmendmentContent, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var rulesIndexAmendmentIdParameter = rulesIndexAmendmentId.HasValue ?
                new ObjectParameter("RulesIndexAmendmentId", rulesIndexAmendmentId) :
                new ObjectParameter("RulesIndexAmendmentId", typeof(int));
    
            var rulesIdParameter = rulesId.HasValue ?
                new ObjectParameter("RulesId", rulesId) :
                new ObjectParameter("RulesId", typeof(int));
    
            var gSRNotificationIdsParameter = gSRNotificationIds != null ?
                new ObjectParameter("GSRNotificationIds", gSRNotificationIds) :
                new ObjectParameter("GSRNotificationIds", typeof(string));
    
            var indexIdParameter = indexId.HasValue ?
                new ObjectParameter("IndexId", indexId) :
                new ObjectParameter("IndexId", typeof(int));
    
            var subIndexIdParameter = subIndexId.HasValue ?
                new ObjectParameter("SubIndexId", subIndexId) :
                new ObjectParameter("SubIndexId", typeof(int));
    
            var indexAmendmentContentParameter = indexAmendmentContent != null ?
                new ObjectParameter("IndexAmendmentContent", indexAmendmentContent) :
                new ObjectParameter("IndexAmendmentContent", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RulesIndexAmendmentUpdate", rulesIndexAmendmentIdParameter, rulesIdParameter, gSRNotificationIdsParameter, indexIdParameter, subIndexIdParameter, indexAmendmentContentParameter, modifiedByParameter, result);
        }
    
        public virtual int AuthorWriteUpAdd(Nullable<int> topicId, string pDF, Nullable<int> createdBy, ObjectParameter result)
        {
            var topicIdParameter = topicId.HasValue ?
                new ObjectParameter("TopicId", topicId) :
                new ObjectParameter("TopicId", typeof(int));
    
            var pDFParameter = pDF != null ?
                new ObjectParameter("PDF", pDF) :
                new ObjectParameter("PDF", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AuthorWriteUpAdd", topicIdParameter, pDFParameter, createdByParameter, result);
        }
    
        public virtual int AuthorWriteUpDelete(Nullable<int> authorWriteUpId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var authorWriteUpIdParameter = authorWriteUpId.HasValue ?
                new ObjectParameter("AuthorWriteUpId", authorWriteUpId) :
                new ObjectParameter("AuthorWriteUpId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AuthorWriteUpDelete", authorWriteUpIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<AuthorWriteUpGet_Result> AuthorWriteUpGet(Nullable<int> authorWriteUpId, Nullable<int> topicId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var authorWriteUpIdParameter = authorWriteUpId.HasValue ?
                new ObjectParameter("AuthorWriteUpId", authorWriteUpId) :
                new ObjectParameter("AuthorWriteUpId", typeof(int));
    
            var topicIdParameter = topicId.HasValue ?
                new ObjectParameter("TopicId", topicId) :
                new ObjectParameter("TopicId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AuthorWriteUpGet_Result>("AuthorWriteUpGet", authorWriteUpIdParameter, topicIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int AuthorWriteUpUpdate(Nullable<int> authorWriteUpId, Nullable<int> topicId, string pDF, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var authorWriteUpIdParameter = authorWriteUpId.HasValue ?
                new ObjectParameter("AuthorWriteUpId", authorWriteUpId) :
                new ObjectParameter("AuthorWriteUpId", typeof(int));
    
            var topicIdParameter = topicId.HasValue ?
                new ObjectParameter("TopicId", topicId) :
                new ObjectParameter("TopicId", typeof(int));
    
            var pDFParameter = pDF != null ?
                new ObjectParameter("PDF", pDF) :
                new ObjectParameter("PDF", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AuthorWriteUpUpdate", authorWriteUpIdParameter, topicIdParameter, pDFParameter, modifiedByParameter, result);
        }
    
        public virtual int AuthorWriteUpDetailAdd(Nullable<int> authorWriteUpId, string subTopicName, string pDF, Nullable<int> createdBy, ObjectParameter result)
        {
            var authorWriteUpIdParameter = authorWriteUpId.HasValue ?
                new ObjectParameter("AuthorWriteUpId", authorWriteUpId) :
                new ObjectParameter("AuthorWriteUpId", typeof(int));
    
            var subTopicNameParameter = subTopicName != null ?
                new ObjectParameter("SubTopicName", subTopicName) :
                new ObjectParameter("SubTopicName", typeof(string));
    
            var pDFParameter = pDF != null ?
                new ObjectParameter("PDF", pDF) :
                new ObjectParameter("PDF", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AuthorWriteUpDetailAdd", authorWriteUpIdParameter, subTopicNameParameter, pDFParameter, createdByParameter, result);
        }
    
        public virtual int AuthorWriteUpDetailDelete(Nullable<int> authorWriteUpDetailId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var authorWriteUpDetailIdParameter = authorWriteUpDetailId.HasValue ?
                new ObjectParameter("AuthorWriteUpDetailId", authorWriteUpDetailId) :
                new ObjectParameter("AuthorWriteUpDetailId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AuthorWriteUpDetailDelete", authorWriteUpDetailIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<AuthorWriteUpDetailGet_Result> AuthorWriteUpDetailGet(Nullable<int> authorWriteUpDetailId, Nullable<int> authorWriteUpId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var authorWriteUpDetailIdParameter = authorWriteUpDetailId.HasValue ?
                new ObjectParameter("AuthorWriteUpDetailId", authorWriteUpDetailId) :
                new ObjectParameter("AuthorWriteUpDetailId", typeof(int));
    
            var authorWriteUpIdParameter = authorWriteUpId.HasValue ?
                new ObjectParameter("AuthorWriteUpId", authorWriteUpId) :
                new ObjectParameter("AuthorWriteUpId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AuthorWriteUpDetailGet_Result>("AuthorWriteUpDetailGet", authorWriteUpDetailIdParameter, authorWriteUpIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int AuthorWriteUpDetailUpdate(Nullable<int> authorWriteUpDetailId, Nullable<int> authorWriteUpId, string subTopicName, string pDF, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var authorWriteUpDetailIdParameter = authorWriteUpDetailId.HasValue ?
                new ObjectParameter("AuthorWriteUpDetailId", authorWriteUpDetailId) :
                new ObjectParameter("AuthorWriteUpDetailId", typeof(int));
    
            var authorWriteUpIdParameter = authorWriteUpId.HasValue ?
                new ObjectParameter("AuthorWriteUpId", authorWriteUpId) :
                new ObjectParameter("AuthorWriteUpId", typeof(int));
    
            var subTopicNameParameter = subTopicName != null ?
                new ObjectParameter("SubTopicName", subTopicName) :
                new ObjectParameter("SubTopicName", typeof(string));
    
            var pDFParameter = pDF != null ?
                new ObjectParameter("PDF", pDF) :
                new ObjectParameter("PDF", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AuthorWriteUpDetailUpdate", authorWriteUpDetailIdParameter, authorWriteUpIdParameter, subTopicNameParameter, pDFParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<SubTopicGet_Result> SubTopicGet(Nullable<int> subTopicId)
        {
            var subTopicIdParameter = subTopicId.HasValue ?
                new ObjectParameter("SubTopicId", subTopicId) :
                new ObjectParameter("SubTopicId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SubTopicGet_Result>("SubTopicGet", subTopicIdParameter);
        }
    
        public virtual int AuthorFAQAdd(Nullable<int> topicId, Nullable<int> createdBy, ObjectParameter result)
        {
            var topicIdParameter = topicId.HasValue ?
                new ObjectParameter("TopicId", topicId) :
                new ObjectParameter("TopicId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AuthorFAQAdd", topicIdParameter, createdByParameter, result);
        }
    
        public virtual int AuthorFAQDelete(Nullable<int> authorFAQId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var authorFAQIdParameter = authorFAQId.HasValue ?
                new ObjectParameter("AuthorFAQId", authorFAQId) :
                new ObjectParameter("AuthorFAQId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AuthorFAQDelete", authorFAQIdParameter, modifiedByParameter, result);
        }
    
        public virtual int AuthorFAQDetailAdd(Nullable<int> authorFAQId, Nullable<int> subTopicId, Nullable<int> createdBy, ObjectParameter result)
        {
            var authorFAQIdParameter = authorFAQId.HasValue ?
                new ObjectParameter("AuthorFAQId", authorFAQId) :
                new ObjectParameter("AuthorFAQId", typeof(int));
    
            var subTopicIdParameter = subTopicId.HasValue ?
                new ObjectParameter("SubTopicId", subTopicId) :
                new ObjectParameter("SubTopicId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AuthorFAQDetailAdd", authorFAQIdParameter, subTopicIdParameter, createdByParameter, result);
        }
    
        public virtual int AuthorFAQDetailDelete(Nullable<int> authorFAQDetailId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var authorFAQDetailIdParameter = authorFAQDetailId.HasValue ?
                new ObjectParameter("AuthorFAQDetailId", authorFAQDetailId) :
                new ObjectParameter("AuthorFAQDetailId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AuthorFAQDetailDelete", authorFAQDetailIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<AuthorFAQDetailGet_Result> AuthorFAQDetailGet(Nullable<int> authorFAQDetailId, Nullable<int> authorFAQId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var authorFAQDetailIdParameter = authorFAQDetailId.HasValue ?
                new ObjectParameter("AuthorFAQDetailId", authorFAQDetailId) :
                new ObjectParameter("AuthorFAQDetailId", typeof(int));
    
            var authorFAQIdParameter = authorFAQId.HasValue ?
                new ObjectParameter("AuthorFAQId", authorFAQId) :
                new ObjectParameter("AuthorFAQId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AuthorFAQDetailGet_Result>("AuthorFAQDetailGet", authorFAQDetailIdParameter, authorFAQIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int AuthorFAQDetailUpdate(Nullable<int> authorFAQDetailId, Nullable<int> authorFAQId, Nullable<int> subTopicId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var authorFAQDetailIdParameter = authorFAQDetailId.HasValue ?
                new ObjectParameter("AuthorFAQDetailId", authorFAQDetailId) :
                new ObjectParameter("AuthorFAQDetailId", typeof(int));
    
            var authorFAQIdParameter = authorFAQId.HasValue ?
                new ObjectParameter("AuthorFAQId", authorFAQId) :
                new ObjectParameter("AuthorFAQId", typeof(int));
    
            var subTopicIdParameter = subTopicId.HasValue ?
                new ObjectParameter("SubTopicId", subTopicId) :
                new ObjectParameter("SubTopicId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AuthorFAQDetailUpdate", authorFAQDetailIdParameter, authorFAQIdParameter, subTopicIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<AuthorFAQGet_Result> AuthorFAQGet(Nullable<int> authorFAQId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var authorFAQIdParameter = authorFAQId.HasValue ?
                new ObjectParameter("AuthorFAQId", authorFAQId) :
                new ObjectParameter("AuthorFAQId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AuthorFAQGet_Result>("AuthorFAQGet", authorFAQIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int AuthorFAQUpdate(Nullable<int> authorFAQId, Nullable<int> topicId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var authorFAQIdParameter = authorFAQId.HasValue ?
                new ObjectParameter("AuthorFAQId", authorFAQId) :
                new ObjectParameter("AuthorFAQId", typeof(int));
    
            var topicIdParameter = topicId.HasValue ?
                new ObjectParameter("TopicId", topicId) :
                new ObjectParameter("TopicId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AuthorFAQUpdate", authorFAQIdParameter, topicIdParameter, modifiedByParameter, result);
        }
    
        public virtual int AuthorFAQQuestionReplyAdd(Nullable<int> authorFAQDetailId, string question, string reply, Nullable<int> createdBy, ObjectParameter result)
        {
            var authorFAQDetailIdParameter = authorFAQDetailId.HasValue ?
                new ObjectParameter("AuthorFAQDetailId", authorFAQDetailId) :
                new ObjectParameter("AuthorFAQDetailId", typeof(int));
    
            var questionParameter = question != null ?
                new ObjectParameter("Question", question) :
                new ObjectParameter("Question", typeof(string));
    
            var replyParameter = reply != null ?
                new ObjectParameter("Reply", reply) :
                new ObjectParameter("Reply", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AuthorFAQQuestionReplyAdd", authorFAQDetailIdParameter, questionParameter, replyParameter, createdByParameter, result);
        }
    
        public virtual int AuthorFAQQuestionReplyDelete(Nullable<int> authorFAQQuestionReplyId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var authorFAQQuestionReplyIdParameter = authorFAQQuestionReplyId.HasValue ?
                new ObjectParameter("AuthorFAQQuestionReplyId", authorFAQQuestionReplyId) :
                new ObjectParameter("AuthorFAQQuestionReplyId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AuthorFAQQuestionReplyDelete", authorFAQQuestionReplyIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<AuthorFAQQuestionReplyGet_Result> AuthorFAQQuestionReplyGet(Nullable<int> authorFAQQuestionReplyId, Nullable<int> authorFAQDetailId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var authorFAQQuestionReplyIdParameter = authorFAQQuestionReplyId.HasValue ?
                new ObjectParameter("AuthorFAQQuestionReplyId", authorFAQQuestionReplyId) :
                new ObjectParameter("AuthorFAQQuestionReplyId", typeof(int));
    
            var authorFAQDetailIdParameter = authorFAQDetailId.HasValue ?
                new ObjectParameter("AuthorFAQDetailId", authorFAQDetailId) :
                new ObjectParameter("AuthorFAQDetailId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AuthorFAQQuestionReplyGet_Result>("AuthorFAQQuestionReplyGet", authorFAQQuestionReplyIdParameter, authorFAQDetailIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int AuthorFAQQuestionReplyUpdate(Nullable<int> authorFAQQuestionReplyId, Nullable<int> authorFAQDetailId, string question, string reply, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var authorFAQQuestionReplyIdParameter = authorFAQQuestionReplyId.HasValue ?
                new ObjectParameter("AuthorFAQQuestionReplyId", authorFAQQuestionReplyId) :
                new ObjectParameter("AuthorFAQQuestionReplyId", typeof(int));
    
            var authorFAQDetailIdParameter = authorFAQDetailId.HasValue ?
                new ObjectParameter("AuthorFAQDetailId", authorFAQDetailId) :
                new ObjectParameter("AuthorFAQDetailId", typeof(int));
    
            var questionParameter = question != null ?
                new ObjectParameter("Question", question) :
                new ObjectParameter("Question", typeof(string));
    
            var replyParameter = reply != null ?
                new ObjectParameter("Reply", reply) :
                new ObjectParameter("Reply", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AuthorFAQQuestionReplyUpdate", authorFAQQuestionReplyIdParameter, authorFAQDetailIdParameter, questionParameter, replyParameter, modifiedByParameter, result);
        }
    
        public virtual int KeyDefinitionEventAdd(string commonFieldDefinitionEventName, string commonFieldModuleIds, string definitionName, string definitionAuthorNote, string definitionContent, string eventName, Nullable<System.DateTime> eventDate, string eventAuthorNote, string notificationIds, string gSRNotificationIds, string fDICircularIds, string pressNoteIds, string actIds, string masterDirectionIds, string aPDIRCircularIds, Nullable<int> createdBy, ObjectParameter result)
        {
            var commonFieldDefinitionEventNameParameter = commonFieldDefinitionEventName != null ?
                new ObjectParameter("CommonFieldDefinitionEventName", commonFieldDefinitionEventName) :
                new ObjectParameter("CommonFieldDefinitionEventName", typeof(string));
    
            var commonFieldModuleIdsParameter = commonFieldModuleIds != null ?
                new ObjectParameter("CommonFieldModuleIds", commonFieldModuleIds) :
                new ObjectParameter("CommonFieldModuleIds", typeof(string));
    
            var definitionNameParameter = definitionName != null ?
                new ObjectParameter("DefinitionName", definitionName) :
                new ObjectParameter("DefinitionName", typeof(string));
    
            var definitionAuthorNoteParameter = definitionAuthorNote != null ?
                new ObjectParameter("DefinitionAuthorNote", definitionAuthorNote) :
                new ObjectParameter("DefinitionAuthorNote", typeof(string));
    
            var definitionContentParameter = definitionContent != null ?
                new ObjectParameter("DefinitionContent", definitionContent) :
                new ObjectParameter("DefinitionContent", typeof(string));
    
            var eventNameParameter = eventName != null ?
                new ObjectParameter("EventName", eventName) :
                new ObjectParameter("EventName", typeof(string));
    
            var eventDateParameter = eventDate.HasValue ?
                new ObjectParameter("EventDate", eventDate) :
                new ObjectParameter("EventDate", typeof(System.DateTime));
    
            var eventAuthorNoteParameter = eventAuthorNote != null ?
                new ObjectParameter("EventAuthorNote", eventAuthorNote) :
                new ObjectParameter("EventAuthorNote", typeof(string));
    
            var notificationIdsParameter = notificationIds != null ?
                new ObjectParameter("NotificationIds", notificationIds) :
                new ObjectParameter("NotificationIds", typeof(string));
    
            var gSRNotificationIdsParameter = gSRNotificationIds != null ?
                new ObjectParameter("GSRNotificationIds", gSRNotificationIds) :
                new ObjectParameter("GSRNotificationIds", typeof(string));
    
            var fDICircularIdsParameter = fDICircularIds != null ?
                new ObjectParameter("FDICircularIds", fDICircularIds) :
                new ObjectParameter("FDICircularIds", typeof(string));
    
            var pressNoteIdsParameter = pressNoteIds != null ?
                new ObjectParameter("PressNoteIds", pressNoteIds) :
                new ObjectParameter("PressNoteIds", typeof(string));
    
            var actIdsParameter = actIds != null ?
                new ObjectParameter("ActIds", actIds) :
                new ObjectParameter("ActIds", typeof(string));
    
            var masterDirectionIdsParameter = masterDirectionIds != null ?
                new ObjectParameter("MasterDirectionIds", masterDirectionIds) :
                new ObjectParameter("MasterDirectionIds", typeof(string));
    
            var aPDIRCircularIdsParameter = aPDIRCircularIds != null ?
                new ObjectParameter("APDIRCircularIds", aPDIRCircularIds) :
                new ObjectParameter("APDIRCircularIds", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("KeyDefinitionEventAdd", commonFieldDefinitionEventNameParameter, commonFieldModuleIdsParameter, definitionNameParameter, definitionAuthorNoteParameter, definitionContentParameter, eventNameParameter, eventDateParameter, eventAuthorNoteParameter, notificationIdsParameter, gSRNotificationIdsParameter, fDICircularIdsParameter, pressNoteIdsParameter, actIdsParameter, masterDirectionIdsParameter, aPDIRCircularIdsParameter, createdByParameter, result);
        }
    
        public virtual int KeyDefinitionEventDelete(Nullable<int> keyDefinitionEventId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var keyDefinitionEventIdParameter = keyDefinitionEventId.HasValue ?
                new ObjectParameter("KeyDefinitionEventId", keyDefinitionEventId) :
                new ObjectParameter("KeyDefinitionEventId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("KeyDefinitionEventDelete", keyDefinitionEventIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<KeyDefinitionEventGet_Result> KeyDefinitionEventGet(Nullable<int> keyDefinitionEventId, string commonFieldDefinitionEventName, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var keyDefinitionEventIdParameter = keyDefinitionEventId.HasValue ?
                new ObjectParameter("KeyDefinitionEventId", keyDefinitionEventId) :
                new ObjectParameter("KeyDefinitionEventId", typeof(int));
    
            var commonFieldDefinitionEventNameParameter = commonFieldDefinitionEventName != null ?
                new ObjectParameter("CommonFieldDefinitionEventName", commonFieldDefinitionEventName) :
                new ObjectParameter("CommonFieldDefinitionEventName", typeof(string));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<KeyDefinitionEventGet_Result>("KeyDefinitionEventGet", keyDefinitionEventIdParameter, commonFieldDefinitionEventNameParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int KeyDefinitionEventUpdate(Nullable<int> keyDefinitionEventId, string commonFieldDefinitionEventName, string commonFieldModuleIds, string definitionName, string definitionAuthorNote, string definitionContent, string eventName, Nullable<System.DateTime> eventDate, string eventAuthorNote, string notificationIds, string gSRNotificationIds, string fDICircularIds, string pressNoteIds, string actIds, string masterDirectionIds, string aPDIRCircularIds, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var keyDefinitionEventIdParameter = keyDefinitionEventId.HasValue ?
                new ObjectParameter("KeyDefinitionEventId", keyDefinitionEventId) :
                new ObjectParameter("KeyDefinitionEventId", typeof(int));
    
            var commonFieldDefinitionEventNameParameter = commonFieldDefinitionEventName != null ?
                new ObjectParameter("CommonFieldDefinitionEventName", commonFieldDefinitionEventName) :
                new ObjectParameter("CommonFieldDefinitionEventName", typeof(string));
    
            var commonFieldModuleIdsParameter = commonFieldModuleIds != null ?
                new ObjectParameter("CommonFieldModuleIds", commonFieldModuleIds) :
                new ObjectParameter("CommonFieldModuleIds", typeof(string));
    
            var definitionNameParameter = definitionName != null ?
                new ObjectParameter("DefinitionName", definitionName) :
                new ObjectParameter("DefinitionName", typeof(string));
    
            var definitionAuthorNoteParameter = definitionAuthorNote != null ?
                new ObjectParameter("DefinitionAuthorNote", definitionAuthorNote) :
                new ObjectParameter("DefinitionAuthorNote", typeof(string));
    
            var definitionContentParameter = definitionContent != null ?
                new ObjectParameter("DefinitionContent", definitionContent) :
                new ObjectParameter("DefinitionContent", typeof(string));
    
            var eventNameParameter = eventName != null ?
                new ObjectParameter("EventName", eventName) :
                new ObjectParameter("EventName", typeof(string));
    
            var eventDateParameter = eventDate.HasValue ?
                new ObjectParameter("EventDate", eventDate) :
                new ObjectParameter("EventDate", typeof(System.DateTime));
    
            var eventAuthorNoteParameter = eventAuthorNote != null ?
                new ObjectParameter("EventAuthorNote", eventAuthorNote) :
                new ObjectParameter("EventAuthorNote", typeof(string));
    
            var notificationIdsParameter = notificationIds != null ?
                new ObjectParameter("NotificationIds", notificationIds) :
                new ObjectParameter("NotificationIds", typeof(string));
    
            var gSRNotificationIdsParameter = gSRNotificationIds != null ?
                new ObjectParameter("GSRNotificationIds", gSRNotificationIds) :
                new ObjectParameter("GSRNotificationIds", typeof(string));
    
            var fDICircularIdsParameter = fDICircularIds != null ?
                new ObjectParameter("FDICircularIds", fDICircularIds) :
                new ObjectParameter("FDICircularIds", typeof(string));
    
            var pressNoteIdsParameter = pressNoteIds != null ?
                new ObjectParameter("PressNoteIds", pressNoteIds) :
                new ObjectParameter("PressNoteIds", typeof(string));
    
            var actIdsParameter = actIds != null ?
                new ObjectParameter("ActIds", actIds) :
                new ObjectParameter("ActIds", typeof(string));
    
            var masterDirectionIdsParameter = masterDirectionIds != null ?
                new ObjectParameter("MasterDirectionIds", masterDirectionIds) :
                new ObjectParameter("MasterDirectionIds", typeof(string));
    
            var aPDIRCircularIdsParameter = aPDIRCircularIds != null ?
                new ObjectParameter("APDIRCircularIds", aPDIRCircularIds) :
                new ObjectParameter("APDIRCircularIds", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("KeyDefinitionEventUpdate", keyDefinitionEventIdParameter, commonFieldDefinitionEventNameParameter, commonFieldModuleIdsParameter, definitionNameParameter, definitionAuthorNoteParameter, definitionContentParameter, eventNameParameter, eventDateParameter, eventAuthorNoteParameter, notificationIdsParameter, gSRNotificationIdsParameter, fDICircularIdsParameter, pressNoteIdsParameter, actIdsParameter, masterDirectionIdsParameter, aPDIRCircularIdsParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<Nullable<int>> lo_SearchCount(string regionalOffice, string foreignCompanyName, string comanyActivites, string indiaAddress, Nullable<int> startRowIndex, Nullable<int> maximumRows, string sortExpression)
        {
            var regionalOfficeParameter = regionalOffice != null ?
                new ObjectParameter("RegionalOffice", regionalOffice) :
                new ObjectParameter("RegionalOffice", typeof(string));
    
            var foreignCompanyNameParameter = foreignCompanyName != null ?
                new ObjectParameter("ForeignCompanyName", foreignCompanyName) :
                new ObjectParameter("ForeignCompanyName", typeof(string));
    
            var comanyActivitesParameter = comanyActivites != null ?
                new ObjectParameter("ComanyActivites", comanyActivites) :
                new ObjectParameter("ComanyActivites", typeof(string));
    
            var indiaAddressParameter = indiaAddress != null ?
                new ObjectParameter("IndiaAddress", indiaAddress) :
                new ObjectParameter("IndiaAddress", typeof(string));
    
            var startRowIndexParameter = startRowIndex.HasValue ?
                new ObjectParameter("StartRowIndex", startRowIndex) :
                new ObjectParameter("StartRowIndex", typeof(int));
    
            var maximumRowsParameter = maximumRows.HasValue ?
                new ObjectParameter("MaximumRows", maximumRows) :
                new ObjectParameter("MaximumRows", typeof(int));
    
            var sortExpressionParameter = sortExpression != null ?
                new ObjectParameter("SortExpression", sortExpression) :
                new ObjectParameter("SortExpression", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("lo_SearchCount", regionalOfficeParameter, foreignCompanyNameParameter, comanyActivitesParameter, indiaAddressParameter, startRowIndexParameter, maximumRowsParameter, sortExpressionParameter);
        }
    
        public virtual ObjectResult<CommonFieldGet_Result> CommonFieldGet(string fieldTypeName, string searchText)
        {
            var fieldTypeNameParameter = fieldTypeName != null ?
                new ObjectParameter("FieldTypeName", fieldTypeName) :
                new ObjectParameter("FieldTypeName", typeof(string));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CommonFieldGet_Result>("CommonFieldGet", fieldTypeNameParameter, searchTextParameter);
        }
    
        public virtual ObjectResult<LoginWithMobile_Result> LoginWithMobile(string mobile, string mobileOTP)
        {
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var mobileOTPParameter = mobileOTP != null ?
                new ObjectParameter("MobileOTP", mobileOTP) :
                new ObjectParameter("MobileOTP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LoginWithMobile_Result>("LoginWithMobile", mobileParameter, mobileOTPParameter);
        }
    
        public virtual ObjectResult<LoginWithUserName_Result> LoginWithUserName(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LoginWithUserName_Result>("LoginWithUserName", userNameParameter, passwordParameter);
        }
    
        public virtual int UserProfileAdd(Nullable<int> roleId, string userName, string mobile, string mobileOTP, string emailOTP, string firstName, string lastName, string companyName, Nullable<int> professionalQualificationId, string city, string gender, Nullable<int> createdBy, ObjectParameter result)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var mobileOTPParameter = mobileOTP != null ?
                new ObjectParameter("MobileOTP", mobileOTP) :
                new ObjectParameter("MobileOTP", typeof(string));
    
            var emailOTPParameter = emailOTP != null ?
                new ObjectParameter("EmailOTP", emailOTP) :
                new ObjectParameter("EmailOTP", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var professionalQualificationIdParameter = professionalQualificationId.HasValue ?
                new ObjectParameter("ProfessionalQualificationId", professionalQualificationId) :
                new ObjectParameter("ProfessionalQualificationId", typeof(int));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserProfileAdd", roleIdParameter, userNameParameter, mobileParameter, mobileOTPParameter, emailOTPParameter, firstNameParameter, lastNameParameter, companyNameParameter, professionalQualificationIdParameter, cityParameter, genderParameter, createdByParameter, result);
        }
    
        public virtual int VerifyAccountForMobile(string userName, string mobile, string mobileOTP, string emailOTP, ObjectParameter result)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var mobileOTPParameter = mobileOTP != null ?
                new ObjectParameter("MobileOTP", mobileOTP) :
                new ObjectParameter("MobileOTP", typeof(string));
    
            var emailOTPParameter = emailOTP != null ?
                new ObjectParameter("EmailOTP", emailOTP) :
                new ObjectParameter("EmailOTP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VerifyAccountForMobile", userNameParameter, mobileParameter, mobileOTPParameter, emailOTPParameter, result);
        }
    
        public virtual int CheckUserExists(string userName, string mobile, ObjectParameter result)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CheckUserExists", userNameParameter, mobileParameter, result);
        }
    
        public virtual int OTPUpdateForLogin(string mobile, string mobileOTP, ObjectParameter result)
        {
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var mobileOTPParameter = mobileOTP != null ?
                new ObjectParameter("MobileOTP", mobileOTP) :
                new ObjectParameter("MobileOTP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OTPUpdateForLogin", mobileParameter, mobileOTPParameter, result);
        }
    
        public virtual int OTPUpdateForUserProfile(Nullable<int> userId, string mobile, string mobileOTP, string emailOTP, Nullable<bool> isVerified, ObjectParameter result)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var mobileOTPParameter = mobileOTP != null ?
                new ObjectParameter("MobileOTP", mobileOTP) :
                new ObjectParameter("MobileOTP", typeof(string));
    
            var emailOTPParameter = emailOTP != null ?
                new ObjectParameter("EmailOTP", emailOTP) :
                new ObjectParameter("EmailOTP", typeof(string));
    
            var isVerifiedParameter = isVerified.HasValue ?
                new ObjectParameter("IsVerified", isVerified) :
                new ObjectParameter("IsVerified", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OTPUpdateForUserProfile", userIdParameter, mobileParameter, mobileOTPParameter, emailOTPParameter, isVerifiedParameter, result);
        }
    
        public virtual ObjectResult<FEMASubModuleOfModuleGet_Result> FEMASubModuleOfModuleGet(Nullable<int> fEMAModuleId, Nullable<int> fEMASubModuleOfModuleId, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var fEMAModuleIdParameter = fEMAModuleId.HasValue ?
                new ObjectParameter("FEMAModuleId", fEMAModuleId) :
                new ObjectParameter("FEMAModuleId", typeof(int));
    
            var fEMASubModuleOfModuleIdParameter = fEMASubModuleOfModuleId.HasValue ?
                new ObjectParameter("FEMASubModuleOfModuleId", fEMASubModuleOfModuleId) :
                new ObjectParameter("FEMASubModuleOfModuleId", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FEMASubModuleOfModuleGet_Result>("FEMASubModuleOfModuleGet", fEMAModuleIdParameter, fEMASubModuleOfModuleIdParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, totalPageCount, totalRecord);
        }
    
        public virtual ObjectResult<RegulationOfFEMASubModuleDetailGet_Result> RegulationOfFEMASubModuleDetailGet(Nullable<int> fEMASubModuleOfModuleId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var fEMASubModuleOfModuleIdParameter = fEMASubModuleOfModuleId.HasValue ?
                new ObjectParameter("FEMASubModuleOfModuleId", fEMASubModuleOfModuleId) :
                new ObjectParameter("FEMASubModuleOfModuleId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RegulationOfFEMASubModuleDetailGet_Result>("RegulationOfFEMASubModuleDetailGet", fEMASubModuleOfModuleIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual ObjectResult<UserProfileGet_Result3> UserProfileGet(Nullable<int> userId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserProfileGet_Result3>("UserProfileGet", userIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual ObjectResult<RulesOfFEMASubModuleDetailGet_Result> RulesOfFEMASubModuleDetailGet(Nullable<int> fEMASubModuleOfModuleId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var fEMASubModuleOfModuleIdParameter = fEMASubModuleOfModuleId.HasValue ?
                new ObjectParameter("FEMASubModuleOfModuleId", fEMASubModuleOfModuleId) :
                new ObjectParameter("FEMASubModuleOfModuleId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RulesOfFEMASubModuleDetailGet_Result>("RulesOfFEMASubModuleDetailGet", fEMASubModuleOfModuleIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual ObjectResult<MasterCircularOfFEMASubModuleDetailGet_Result> MasterCircularOfFEMASubModuleDetailGet(Nullable<int> fEMASubModuleOfModuleId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var fEMASubModuleOfModuleIdParameter = fEMASubModuleOfModuleId.HasValue ?
                new ObjectParameter("FEMASubModuleOfModuleId", fEMASubModuleOfModuleId) :
                new ObjectParameter("FEMASubModuleOfModuleId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MasterCircularOfFEMASubModuleDetailGet_Result>("MasterCircularOfFEMASubModuleDetailGet", fEMASubModuleOfModuleIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual ObjectResult<MasterDirectionOfFEMASubModuleDetailGet_Result> MasterDirectionOfFEMASubModuleDetailGet(Nullable<int> fEMASubModuleOfModuleId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var fEMASubModuleOfModuleIdParameter = fEMASubModuleOfModuleId.HasValue ?
                new ObjectParameter("FEMASubModuleOfModuleId", fEMASubModuleOfModuleId) :
                new ObjectParameter("FEMASubModuleOfModuleId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MasterDirectionOfFEMASubModuleDetailGet_Result>("MasterDirectionOfFEMASubModuleDetailGet", fEMASubModuleOfModuleIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int FEMASubModuleDetailAdd(Nullable<int> fEMAModuleId, Nullable<int> fEMASubModuleId, string regulationKeyModuleDetail, string rulesKeyModuleDetail, string masterDirectionKeyModuleDetail, string masterCircularKeyModuleDetail, string rBIFAQKeyModuleDetail, string formKeyModuleDetail, string summaryKeyModuleDetail, string documentationKeyModuleDetail, Nullable<int> createdBy, ObjectParameter result)
        {
            var fEMAModuleIdParameter = fEMAModuleId.HasValue ?
                new ObjectParameter("FEMAModuleId", fEMAModuleId) :
                new ObjectParameter("FEMAModuleId", typeof(int));
    
            var fEMASubModuleIdParameter = fEMASubModuleId.HasValue ?
                new ObjectParameter("FEMASubModuleId", fEMASubModuleId) :
                new ObjectParameter("FEMASubModuleId", typeof(int));
    
            var regulationKeyModuleDetailParameter = regulationKeyModuleDetail != null ?
                new ObjectParameter("RegulationKeyModuleDetail", regulationKeyModuleDetail) :
                new ObjectParameter("RegulationKeyModuleDetail", typeof(string));
    
            var rulesKeyModuleDetailParameter = rulesKeyModuleDetail != null ?
                new ObjectParameter("RulesKeyModuleDetail", rulesKeyModuleDetail) :
                new ObjectParameter("RulesKeyModuleDetail", typeof(string));
    
            var masterDirectionKeyModuleDetailParameter = masterDirectionKeyModuleDetail != null ?
                new ObjectParameter("MasterDirectionKeyModuleDetail", masterDirectionKeyModuleDetail) :
                new ObjectParameter("MasterDirectionKeyModuleDetail", typeof(string));
    
            var masterCircularKeyModuleDetailParameter = masterCircularKeyModuleDetail != null ?
                new ObjectParameter("MasterCircularKeyModuleDetail", masterCircularKeyModuleDetail) :
                new ObjectParameter("MasterCircularKeyModuleDetail", typeof(string));
    
            var rBIFAQKeyModuleDetailParameter = rBIFAQKeyModuleDetail != null ?
                new ObjectParameter("RBIFAQKeyModuleDetail", rBIFAQKeyModuleDetail) :
                new ObjectParameter("RBIFAQKeyModuleDetail", typeof(string));
    
            var formKeyModuleDetailParameter = formKeyModuleDetail != null ?
                new ObjectParameter("FormKeyModuleDetail", formKeyModuleDetail) :
                new ObjectParameter("FormKeyModuleDetail", typeof(string));
    
            var summaryKeyModuleDetailParameter = summaryKeyModuleDetail != null ?
                new ObjectParameter("SummaryKeyModuleDetail", summaryKeyModuleDetail) :
                new ObjectParameter("SummaryKeyModuleDetail", typeof(string));
    
            var documentationKeyModuleDetailParameter = documentationKeyModuleDetail != null ?
                new ObjectParameter("DocumentationKeyModuleDetail", documentationKeyModuleDetail) :
                new ObjectParameter("DocumentationKeyModuleDetail", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FEMASubModuleDetailAdd", fEMAModuleIdParameter, fEMASubModuleIdParameter, regulationKeyModuleDetailParameter, rulesKeyModuleDetailParameter, masterDirectionKeyModuleDetailParameter, masterCircularKeyModuleDetailParameter, rBIFAQKeyModuleDetailParameter, formKeyModuleDetailParameter, summaryKeyModuleDetailParameter, documentationKeyModuleDetailParameter, createdByParameter, result);
        }
    
        public virtual int FEMASubModuleDetailUpdate(Nullable<int> fEMASubModuleOfModuleId, Nullable<int> fEMAModuleId, Nullable<int> fEMASubModuleId, string regulationKeyModuleDetail, string rulesKeyModuleDetail, string masterDirectionKeyModuleDetail, string masterCircularKeyModuleDetail, string rBIFAQKeyModuleDetail, string formKeyModuleDetail, string summaryKeyModuleDetail, string documentationKeyModuleDetail, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var fEMASubModuleOfModuleIdParameter = fEMASubModuleOfModuleId.HasValue ?
                new ObjectParameter("FEMASubModuleOfModuleId", fEMASubModuleOfModuleId) :
                new ObjectParameter("FEMASubModuleOfModuleId", typeof(int));
    
            var fEMAModuleIdParameter = fEMAModuleId.HasValue ?
                new ObjectParameter("FEMAModuleId", fEMAModuleId) :
                new ObjectParameter("FEMAModuleId", typeof(int));
    
            var fEMASubModuleIdParameter = fEMASubModuleId.HasValue ?
                new ObjectParameter("FEMASubModuleId", fEMASubModuleId) :
                new ObjectParameter("FEMASubModuleId", typeof(int));
    
            var regulationKeyModuleDetailParameter = regulationKeyModuleDetail != null ?
                new ObjectParameter("RegulationKeyModuleDetail", regulationKeyModuleDetail) :
                new ObjectParameter("RegulationKeyModuleDetail", typeof(string));
    
            var rulesKeyModuleDetailParameter = rulesKeyModuleDetail != null ?
                new ObjectParameter("RulesKeyModuleDetail", rulesKeyModuleDetail) :
                new ObjectParameter("RulesKeyModuleDetail", typeof(string));
    
            var masterDirectionKeyModuleDetailParameter = masterDirectionKeyModuleDetail != null ?
                new ObjectParameter("MasterDirectionKeyModuleDetail", masterDirectionKeyModuleDetail) :
                new ObjectParameter("MasterDirectionKeyModuleDetail", typeof(string));
    
            var masterCircularKeyModuleDetailParameter = masterCircularKeyModuleDetail != null ?
                new ObjectParameter("MasterCircularKeyModuleDetail", masterCircularKeyModuleDetail) :
                new ObjectParameter("MasterCircularKeyModuleDetail", typeof(string));
    
            var rBIFAQKeyModuleDetailParameter = rBIFAQKeyModuleDetail != null ?
                new ObjectParameter("RBIFAQKeyModuleDetail", rBIFAQKeyModuleDetail) :
                new ObjectParameter("RBIFAQKeyModuleDetail", typeof(string));
    
            var formKeyModuleDetailParameter = formKeyModuleDetail != null ?
                new ObjectParameter("FormKeyModuleDetail", formKeyModuleDetail) :
                new ObjectParameter("FormKeyModuleDetail", typeof(string));
    
            var summaryKeyModuleDetailParameter = summaryKeyModuleDetail != null ?
                new ObjectParameter("SummaryKeyModuleDetail", summaryKeyModuleDetail) :
                new ObjectParameter("SummaryKeyModuleDetail", typeof(string));
    
            var documentationKeyModuleDetailParameter = documentationKeyModuleDetail != null ?
                new ObjectParameter("DocumentationKeyModuleDetail", documentationKeyModuleDetail) :
                new ObjectParameter("DocumentationKeyModuleDetail", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FEMASubModuleDetailUpdate", fEMASubModuleOfModuleIdParameter, fEMAModuleIdParameter, fEMASubModuleIdParameter, regulationKeyModuleDetailParameter, rulesKeyModuleDetailParameter, masterDirectionKeyModuleDetailParameter, masterCircularKeyModuleDetailParameter, rBIFAQKeyModuleDetailParameter, formKeyModuleDetailParameter, summaryKeyModuleDetailParameter, documentationKeyModuleDetailParameter, modifiedByParameter, result);
        }
    
        public virtual int FEMASubModuleOfModuleDelete(Nullable<int> fEMASubModuleOfModuleId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var fEMASubModuleOfModuleIdParameter = fEMASubModuleOfModuleId.HasValue ?
                new ObjectParameter("FEMASubModuleOfModuleId", fEMASubModuleOfModuleId) :
                new ObjectParameter("FEMASubModuleOfModuleId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FEMASubModuleOfModuleDelete", fEMASubModuleOfModuleIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<RBIFAQOfFEMASubModuleDetailGet_Result> RBIFAQOfFEMASubModuleDetailGet(Nullable<int> fEMASubModuleOfModuleId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var fEMASubModuleOfModuleIdParameter = fEMASubModuleOfModuleId.HasValue ?
                new ObjectParameter("FEMASubModuleOfModuleId", fEMASubModuleOfModuleId) :
                new ObjectParameter("FEMASubModuleOfModuleId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RBIFAQOfFEMASubModuleDetailGet_Result>("RBIFAQOfFEMASubModuleDetailGet", fEMASubModuleOfModuleIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int SupportTicketAdd(Nullable<int> userId, Nullable<int> topicId, Nullable<int> subTopicId, string queryTitle, Nullable<int> departmentId, string query, Nullable<int> createdBy, ObjectParameter result)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var topicIdParameter = topicId.HasValue ?
                new ObjectParameter("TopicId", topicId) :
                new ObjectParameter("TopicId", typeof(int));
    
            var subTopicIdParameter = subTopicId.HasValue ?
                new ObjectParameter("SubTopicId", subTopicId) :
                new ObjectParameter("SubTopicId", typeof(int));
    
            var queryTitleParameter = queryTitle != null ?
                new ObjectParameter("QueryTitle", queryTitle) :
                new ObjectParameter("QueryTitle", typeof(string));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var queryParameter = query != null ?
                new ObjectParameter("Query", query) :
                new ObjectParameter("Query", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SupportTicketAdd", userIdParameter, topicIdParameter, subTopicIdParameter, queryTitleParameter, departmentIdParameter, queryParameter, createdByParameter, result);
        }
    
        public virtual ObjectResult<SupportTicketGet_Result> SupportTicketGet(Nullable<int> supportTicketId, Nullable<int> userId, Nullable<bool> isForPostQuery, Nullable<int> topicId, Nullable<int> subTopicId, Nullable<int> departmentId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var supportTicketIdParameter = supportTicketId.HasValue ?
                new ObjectParameter("SupportTicketId", supportTicketId) :
                new ObjectParameter("SupportTicketId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var isForPostQueryParameter = isForPostQuery.HasValue ?
                new ObjectParameter("IsForPostQuery", isForPostQuery) :
                new ObjectParameter("IsForPostQuery", typeof(bool));
    
            var topicIdParameter = topicId.HasValue ?
                new ObjectParameter("TopicId", topicId) :
                new ObjectParameter("TopicId", typeof(int));
    
            var subTopicIdParameter = subTopicId.HasValue ?
                new ObjectParameter("SubTopicId", subTopicId) :
                new ObjectParameter("SubTopicId", typeof(int));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SupportTicketGet_Result>("SupportTicketGet", supportTicketIdParameter, userIdParameter, isForPostQueryParameter, topicIdParameter, subTopicIdParameter, departmentIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int SupportTicketReplyAdd(Nullable<int> supportTicketId, Nullable<int> userId, string queryReply, Nullable<int> createdBy, ObjectParameter emailId, ObjectParameter result)
        {
            var supportTicketIdParameter = supportTicketId.HasValue ?
                new ObjectParameter("SupportTicketId", supportTicketId) :
                new ObjectParameter("SupportTicketId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var queryReplyParameter = queryReply != null ?
                new ObjectParameter("QueryReply", queryReply) :
                new ObjectParameter("QueryReply", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SupportTicketReplyAdd", supportTicketIdParameter, userIdParameter, queryReplyParameter, createdByParameter, emailId, result);
        }
    
        public virtual ObjectResult<SupportTicketReplyGet_Result> SupportTicketReplyGet(Nullable<int> supportTicketId, Nullable<int> userId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var supportTicketIdParameter = supportTicketId.HasValue ?
                new ObjectParameter("SupportTicketId", supportTicketId) :
                new ObjectParameter("SupportTicketId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SupportTicketReplyGet_Result>("SupportTicketReplyGet", supportTicketIdParameter, userIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int SupportTicketDelete(Nullable<int> supportTicketId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var supportTicketIdParameter = supportTicketId.HasValue ?
                new ObjectParameter("SupportTicketId", supportTicketId) :
                new ObjectParameter("SupportTicketId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SupportTicketDelete", supportTicketIdParameter, modifiedByParameter, result);
        }
    
        public virtual int SupportTicketReplyDelete(Nullable<int> supportTicketReplyId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var supportTicketReplyIdParameter = supportTicketReplyId.HasValue ?
                new ObjectParameter("SupportTicketReplyId", supportTicketReplyId) :
                new ObjectParameter("SupportTicketReplyId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SupportTicketReplyDelete", supportTicketReplyIdParameter, modifiedByParameter, result);
        }
    
        public virtual int SupportTicketMailSentUpdate(Nullable<int> supportTicketId, Nullable<bool> isMailSentToAdmin, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var supportTicketIdParameter = supportTicketId.HasValue ?
                new ObjectParameter("SupportTicketId", supportTicketId) :
                new ObjectParameter("SupportTicketId", typeof(int));
    
            var isMailSentToAdminParameter = isMailSentToAdmin.HasValue ?
                new ObjectParameter("IsMailSentToAdmin", isMailSentToAdmin) :
                new ObjectParameter("IsMailSentToAdmin", typeof(bool));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SupportTicketMailSentUpdate", supportTicketIdParameter, isMailSentToAdminParameter, modifiedByParameter, result);
        }
    
        public virtual int SupportTicketReplyMailSentUpdate(Nullable<int> supportTicketReplyId, Nullable<bool> isMailSentToAdmin, Nullable<bool> isMailSentToUser, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var supportTicketReplyIdParameter = supportTicketReplyId.HasValue ?
                new ObjectParameter("SupportTicketReplyId", supportTicketReplyId) :
                new ObjectParameter("SupportTicketReplyId", typeof(int));
    
            var isMailSentToAdminParameter = isMailSentToAdmin.HasValue ?
                new ObjectParameter("IsMailSentToAdmin", isMailSentToAdmin) :
                new ObjectParameter("IsMailSentToAdmin", typeof(bool));
    
            var isMailSentToUserParameter = isMailSentToUser.HasValue ?
                new ObjectParameter("IsMailSentToUser", isMailSentToUser) :
                new ObjectParameter("IsMailSentToUser", typeof(bool));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SupportTicketReplyMailSentUpdate", supportTicketReplyIdParameter, isMailSentToAdminParameter, isMailSentToUserParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<PenaltyDetailGet_Result> PenaltyDetailGet(Nullable<int> penaltyDetailID, Nullable<int> calculatorID, Nullable<int> calculatorSubTopicID, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var penaltyDetailIDParameter = penaltyDetailID.HasValue ?
                new ObjectParameter("PenaltyDetailID", penaltyDetailID) :
                new ObjectParameter("PenaltyDetailID", typeof(int));
    
            var calculatorIDParameter = calculatorID.HasValue ?
                new ObjectParameter("CalculatorID", calculatorID) :
                new ObjectParameter("CalculatorID", typeof(int));
    
            var calculatorSubTopicIDParameter = calculatorSubTopicID.HasValue ?
                new ObjectParameter("CalculatorSubTopicID", calculatorSubTopicID) :
                new ObjectParameter("CalculatorSubTopicID", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PenaltyDetailGet_Result>("PenaltyDetailGet", penaltyDetailIDParameter, calculatorIDParameter, calculatorSubTopicIDParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual ObjectResult<CalculatorSubTopicGet_Result> CalculatorSubTopicGet(Nullable<int> calculatorSubTopicId, Nullable<int> fEMAModuleId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var calculatorSubTopicIdParameter = calculatorSubTopicId.HasValue ?
                new ObjectParameter("CalculatorSubTopicId", calculatorSubTopicId) :
                new ObjectParameter("CalculatorSubTopicId", typeof(int));
    
            var fEMAModuleIdParameter = fEMAModuleId.HasValue ?
                new ObjectParameter("FEMAModuleId", fEMAModuleId) :
                new ObjectParameter("FEMAModuleId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CalculatorSubTopicGet_Result>("CalculatorSubTopicGet", calculatorSubTopicIdParameter, fEMAModuleIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual ObjectResult<SupportTicketSubTopicGet_Result> SupportTicketSubTopicGet(Nullable<int> supportTicketSubTopicId, Nullable<int> fEMAModuleId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var supportTicketSubTopicIdParameter = supportTicketSubTopicId.HasValue ?
                new ObjectParameter("SupportTicketSubTopicId", supportTicketSubTopicId) :
                new ObjectParameter("SupportTicketSubTopicId", typeof(int));
    
            var fEMAModuleIdParameter = fEMAModuleId.HasValue ?
                new ObjectParameter("FEMAModuleId", fEMAModuleId) :
                new ObjectParameter("FEMAModuleId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SupportTicketSubTopicGet_Result>("SupportTicketSubTopicGet", supportTicketSubTopicIdParameter, fEMAModuleIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual ObjectResult<CalculatorAnswerGet_Result> CalculatorAnswerGet(Nullable<int> calculatorAnswerId, Nullable<int> calculatorQuestionId, Nullable<int> fEMAModuleId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var calculatorAnswerIdParameter = calculatorAnswerId.HasValue ?
                new ObjectParameter("CalculatorAnswerId", calculatorAnswerId) :
                new ObjectParameter("CalculatorAnswerId", typeof(int));
    
            var calculatorQuestionIdParameter = calculatorQuestionId.HasValue ?
                new ObjectParameter("CalculatorQuestionId", calculatorQuestionId) :
                new ObjectParameter("CalculatorQuestionId", typeof(int));
    
            var fEMAModuleIdParameter = fEMAModuleId.HasValue ?
                new ObjectParameter("FEMAModuleId", fEMAModuleId) :
                new ObjectParameter("FEMAModuleId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CalculatorAnswerGet_Result>("CalculatorAnswerGet", calculatorAnswerIdParameter, calculatorQuestionIdParameter, fEMAModuleIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int ContactUsAdd(string name, string email, string mobile, string comment, Nullable<int> createdBy, ObjectParameter result)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ContactUsAdd", nameParameter, emailParameter, mobileParameter, commentParameter, createdByParameter, result);
        }
    
        public virtual int ContactUsDelete(Nullable<int> contactUsId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var contactUsIdParameter = contactUsId.HasValue ?
                new ObjectParameter("ContactUsId", contactUsId) :
                new ObjectParameter("ContactUsId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ContactUsDelete", contactUsIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<ContactUsGet_Result> ContactUsGet(Nullable<int> contactUsId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var contactUsIdParameter = contactUsId.HasValue ?
                new ObjectParameter("ContactUsId", contactUsId) :
                new ObjectParameter("ContactUsId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ContactUsGet_Result>("ContactUsGet", contactUsIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual ObjectResult<PackageGet_Result> PackageGet(Nullable<int> packageId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var packageIdParameter = packageId.HasValue ?
                new ObjectParameter("PackageId", packageId) :
                new ObjectParameter("PackageId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PackageGet_Result>("PackageGet", packageIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int SubscriptionAdd(Nullable<int> userId, Nullable<int> packageId, Nullable<int> createdBy, ObjectParameter result)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var packageIdParameter = packageId.HasValue ?
                new ObjectParameter("PackageId", packageId) :
                new ObjectParameter("PackageId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SubscriptionAdd", userIdParameter, packageIdParameter, createdByParameter, result);
        }
    
        public virtual ObjectResult<SubscriptionGet_Result2> SubscriptionGet(Nullable<int> subscriptionId, Nullable<int> userId, Nullable<int> packageId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var subscriptionIdParameter = subscriptionId.HasValue ?
                new ObjectParameter("SubscriptionId", subscriptionId) :
                new ObjectParameter("SubscriptionId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var packageIdParameter = packageId.HasValue ?
                new ObjectParameter("PackageId", packageId) :
                new ObjectParameter("PackageId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SubscriptionGet_Result2>("SubscriptionGet", subscriptionIdParameter, userIdParameter, packageIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int SubscriptionUpdate(Nullable<int> subscriptionId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> paymentDate, Nullable<bool> isExpired, Nullable<bool> isActive, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var subscriptionIdParameter = subscriptionId.HasValue ?
                new ObjectParameter("SubscriptionId", subscriptionId) :
                new ObjectParameter("SubscriptionId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var paymentDateParameter = paymentDate.HasValue ?
                new ObjectParameter("PaymentDate", paymentDate) :
                new ObjectParameter("PaymentDate", typeof(System.DateTime));
    
            var isExpiredParameter = isExpired.HasValue ?
                new ObjectParameter("IsExpired", isExpired) :
                new ObjectParameter("IsExpired", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SubscriptionUpdate", subscriptionIdParameter, startDateParameter, paymentDateParameter, isExpiredParameter, isActiveParameter, modifiedByParameter, result);
        }
    
        public virtual int SubscriptionMailSentUpdate(Nullable<int> subscriptionId, Nullable<bool> isMailSentToUser, Nullable<bool> isMailSentToAdmin, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var subscriptionIdParameter = subscriptionId.HasValue ?
                new ObjectParameter("SubscriptionId", subscriptionId) :
                new ObjectParameter("SubscriptionId", typeof(int));
    
            var isMailSentToUserParameter = isMailSentToUser.HasValue ?
                new ObjectParameter("IsMailSentToUser", isMailSentToUser) :
                new ObjectParameter("IsMailSentToUser", typeof(bool));
    
            var isMailSentToAdminParameter = isMailSentToAdmin.HasValue ?
                new ObjectParameter("IsMailSentToAdmin", isMailSentToAdmin) :
                new ObjectParameter("IsMailSentToAdmin", typeof(bool));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SubscriptionMailSentUpdate", subscriptionIdParameter, isMailSentToUserParameter, isMailSentToAdminParameter, modifiedByParameter, result);
        }
    
        public virtual int SubscriptionHistoryMailSentUpdate(Nullable<int> subscriptionHistoryId, Nullable<bool> isMailSentToUser, Nullable<bool> isMailSentToAdmin, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var subscriptionHistoryIdParameter = subscriptionHistoryId.HasValue ?
                new ObjectParameter("SubscriptionHistoryId", subscriptionHistoryId) :
                new ObjectParameter("SubscriptionHistoryId", typeof(int));
    
            var isMailSentToUserParameter = isMailSentToUser.HasValue ?
                new ObjectParameter("IsMailSentToUser", isMailSentToUser) :
                new ObjectParameter("IsMailSentToUser", typeof(bool));
    
            var isMailSentToAdminParameter = isMailSentToAdmin.HasValue ?
                new ObjectParameter("IsMailSentToAdmin", isMailSentToAdmin) :
                new ObjectParameter("IsMailSentToAdmin", typeof(bool));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SubscriptionHistoryMailSentUpdate", subscriptionHistoryIdParameter, isMailSentToUserParameter, isMailSentToAdminParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<LatestNewsGet_Result> LatestNewsGet()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LatestNewsGet_Result>("LatestNewsGet");
        }
    
        public virtual ObjectResult<SearchGet_Result> SearchGet(Nullable<int> categoryId, string searchText, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchGet_Result>("SearchGet", categoryIdParameter, searchTextParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int UserProfileUpdate(Nullable<int> userId, string userName, string firstName, string lastName, string mobile, string gender, string companyName, Nullable<int> professionalQualificationId, string city, string mobileOTP, string emailOTP, Nullable<bool> isActive, Nullable<bool> isDeleted, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var professionalQualificationIdParameter = professionalQualificationId.HasValue ?
                new ObjectParameter("ProfessionalQualificationId", professionalQualificationId) :
                new ObjectParameter("ProfessionalQualificationId", typeof(int));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var mobileOTPParameter = mobileOTP != null ?
                new ObjectParameter("MobileOTP", mobileOTP) :
                new ObjectParameter("MobileOTP", typeof(string));
    
            var emailOTPParameter = emailOTP != null ?
                new ObjectParameter("EmailOTP", emailOTP) :
                new ObjectParameter("EmailOTP", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserProfileUpdate", userIdParameter, userNameParameter, firstNameParameter, lastNameParameter, mobileParameter, genderParameter, companyNameParameter, professionalQualificationIdParameter, cityParameter, mobileOTPParameter, emailOTPParameter, isActiveParameter, isDeletedParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<SearchAutoCompleteGet_Result> SearchAutoCompleteGet(string searchText)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchAutoCompleteGet_Result>("SearchAutoCompleteGet", searchTextParameter);
        }
    
        public virtual ObjectResult<FormSummaryDocumentationOfFEMASubModuleDetailGet_Result> FormSummaryDocumentationOfFEMASubModuleDetailGet(Nullable<int> fEMASubModuleOfModuleId, string subMenuName, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var fEMASubModuleOfModuleIdParameter = fEMASubModuleOfModuleId.HasValue ?
                new ObjectParameter("FEMASubModuleOfModuleId", fEMASubModuleOfModuleId) :
                new ObjectParameter("FEMASubModuleOfModuleId", typeof(int));
    
            var subMenuNameParameter = subMenuName != null ?
                new ObjectParameter("SubMenuName", subMenuName) :
                new ObjectParameter("SubMenuName", typeof(string));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FormSummaryDocumentationOfFEMASubModuleDetailGet_Result>("FormSummaryDocumentationOfFEMASubModuleDetailGet", fEMASubModuleOfModuleIdParameter, subMenuNameParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual ObjectResult<AmendmentContentGet_Result> AmendmentContentGet(Nullable<int> amendmentContentId, Nullable<int> indexAmendmentId, Nullable<int> amendmentContentModuleId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var amendmentContentIdParameter = amendmentContentId.HasValue ?
                new ObjectParameter("AmendmentContentId", amendmentContentId) :
                new ObjectParameter("AmendmentContentId", typeof(int));
    
            var indexAmendmentIdParameter = indexAmendmentId.HasValue ?
                new ObjectParameter("IndexAmendmentId", indexAmendmentId) :
                new ObjectParameter("IndexAmendmentId", typeof(int));
    
            var amendmentContentModuleIdParameter = amendmentContentModuleId.HasValue ?
                new ObjectParameter("AmendmentContentModuleId", amendmentContentModuleId) :
                new ObjectParameter("AmendmentContentModuleId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AmendmentContentGet_Result>("AmendmentContentGet", amendmentContentIdParameter, indexAmendmentIdParameter, amendmentContentModuleIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int UserLegalAggrementAdd(Nullable<int> userId, Nullable<bool> legalAggrement, Nullable<int> createdBy, ObjectParameter result)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var legalAggrementParameter = legalAggrement.HasValue ?
                new ObjectParameter("LegalAggrement", legalAggrement) :
                new ObjectParameter("LegalAggrement", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserLegalAggrementAdd", userIdParameter, legalAggrementParameter, createdByParameter, result);
        }
    
        public virtual int CheckUserLegalAgreement(Nullable<int> userId, ObjectParameter result)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CheckUserLegalAgreement", userIdParameter, result);
        }
    
        public virtual ObjectResult<SubscriptionPackageGet_Result6> SubscriptionPackageGet(Nullable<int> packageId, string searchText, Nullable<bool> isActive, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var packageIdParameter = packageId.HasValue ?
                new ObjectParameter("PackageId", packageId) :
                new ObjectParameter("PackageId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SubscriptionPackageGet_Result6>("SubscriptionPackageGet", packageIdParameter, searchTextParameter, isActiveParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int SubscriptionPackageAdd(string packageName, Nullable<decimal> packageAmount, string packageDetail, Nullable<int> createdBy, ObjectParameter result)
        {
            var packageNameParameter = packageName != null ?
                new ObjectParameter("PackageName", packageName) :
                new ObjectParameter("PackageName", typeof(string));
    
            var packageAmountParameter = packageAmount.HasValue ?
                new ObjectParameter("PackageAmount", packageAmount) :
                new ObjectParameter("PackageAmount", typeof(decimal));
    
            var packageDetailParameter = packageDetail != null ?
                new ObjectParameter("PackageDetail", packageDetail) :
                new ObjectParameter("PackageDetail", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SubscriptionPackageAdd", packageNameParameter, packageAmountParameter, packageDetailParameter, createdByParameter, result);
        }
    
        public virtual int SubscriptionPackageUpdate(Nullable<int> packageId, string packageName, Nullable<decimal> packageAmount, string packageDetail, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var packageIdParameter = packageId.HasValue ?
                new ObjectParameter("PackageId", packageId) :
                new ObjectParameter("PackageId", typeof(int));
    
            var packageNameParameter = packageName != null ?
                new ObjectParameter("PackageName", packageName) :
                new ObjectParameter("PackageName", typeof(string));
    
            var packageAmountParameter = packageAmount.HasValue ?
                new ObjectParameter("PackageAmount", packageAmount) :
                new ObjectParameter("PackageAmount", typeof(decimal));
    
            var packageDetailParameter = packageDetail != null ?
                new ObjectParameter("PackageDetail", packageDetail) :
                new ObjectParameter("PackageDetail", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SubscriptionPackageUpdate", packageIdParameter, packageNameParameter, packageAmountParameter, packageDetailParameter, modifiedByParameter, result);
        }
    
        public virtual int SubscriptionPackageDelete(Nullable<int> packageId, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var packageIdParameter = packageId.HasValue ?
                new ObjectParameter("PackageId", packageId) :
                new ObjectParameter("PackageId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SubscriptionPackageDelete", packageIdParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<SbscriptionPackageInformationGet_Result> SbscriptionPackageInformationGet(Nullable<int> packageId)
        {
            var packageIdParameter = packageId.HasValue ?
                new ObjectParameter("PackageId", packageId) :
                new ObjectParameter("PackageId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SbscriptionPackageInformationGet_Result>("SbscriptionPackageInformationGet", packageIdParameter);
        }
    
        public virtual ObjectResult<SubcriptionPackageInformationGet_Result> SubcriptionPackageInformationGet(Nullable<int> subPackageId)
        {
            var subPackageIdParameter = subPackageId.HasValue ?
                new ObjectParameter("SubPackageId", subPackageId) :
                new ObjectParameter("SubPackageId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SubcriptionPackageInformationGet_Result>("SubcriptionPackageInformationGet", subPackageIdParameter);
        }
    
        public virtual int Policy_AddUpdate(string content, ObjectParameter result)
        {
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Policy_AddUpdate", contentParameter, result);
        }
    
        public virtual ObjectResult<string> PrivacyPolicyGet()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("PrivacyPolicyGet");
        }
    
        public virtual ObjectResult<GetPrivacyPolicy_Result> GetPrivacyPolicy(Nullable<int> iD, string searchText, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPrivacyPolicy_Result>("GetPrivacyPolicy", iDParameter, searchTextParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual ObjectResult<GetTermsCondition_Result> GetTermsCondition(Nullable<int> iD, string searchText, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTermsCondition_Result>("GetTermsCondition", iDParameter, searchTextParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int TermsCondition_Add(string content, ObjectParameter result)
        {
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TermsCondition_Add", contentParameter, result);
        }
    
        public virtual int EndUserLicenseAggrement_Add(string content, ObjectParameter result)
        {
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EndUserLicenseAggrement_Add", contentParameter, result);
        }
    
        public virtual ObjectResult<GetEndUserLicenseAggrement_Result> GetEndUserLicenseAggrement(Nullable<int> iD, string searchText, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEndUserLicenseAggrement_Result>("GetEndUserLicenseAggrement", iDParameter, searchTextParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual ObjectResult<GetSubscriptionPolicy_Result> GetSubscriptionPolicy(Nullable<int> iD, string searchText, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<bool> isPagingRequired, string orderBy, string orderByDirection, ObjectParameter totalPageCount, ObjectParameter totalRecord)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isPagingRequiredParameter = isPagingRequired.HasValue ?
                new ObjectParameter("IsPagingRequired", isPagingRequired) :
                new ObjectParameter("IsPagingRequired", typeof(bool));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSubscriptionPolicy_Result>("GetSubscriptionPolicy", iDParameter, searchTextParameter, pageNumberParameter, pageSizeParameter, isPagingRequiredParameter, orderByParameter, orderByDirectionParameter, totalPageCount, totalRecord);
        }
    
        public virtual int SubscriptionPolicy_Add(string content, ObjectParameter result)
        {
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SubscriptionPolicy_Add", contentParameter, result);
        }
    }
}
